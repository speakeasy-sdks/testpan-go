// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DefaultConnectionRuleType string

const (
	DefaultConnectionRuleTypeAllowAll        DefaultConnectionRuleType = "ALLOW_ALL"
	DefaultConnectionRuleTypeEnvironmentOnly DefaultConnectionRuleType = "ENVIRONMENT_ONLY"
	DefaultConnectionRuleTypeDenyAll         DefaultConnectionRuleType = "DENY_ALL"
)

func (e DefaultConnectionRuleType) ToPointer() *DefaultConnectionRuleType {
	return &e
}

func (e *DefaultConnectionRuleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW_ALL":
		fallthrough
	case "ENVIRONMENT_ONLY":
		fallthrough
	case "DENY_ALL":
		*e = DefaultConnectionRuleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultConnectionRuleType: %v", v)
	}
}

type DefaultConnectionRule struct {
	// ENCRYPT is not allowed in default rule
	Action *ConnectionRuleAction      `json:"action,omitempty"`
	Type   *DefaultConnectionRuleType `json:"type,omitempty"`
}

func (o *DefaultConnectionRule) GetAction() *ConnectionRuleAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *DefaultConnectionRule) GetType() *DefaultConnectionRuleType {
	if o == nil {
		return nil
	}
	return o.Type
}

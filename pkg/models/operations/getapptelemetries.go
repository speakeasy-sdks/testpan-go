// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
	"time"
)

// GetAppTelemetriesProtectionStatus - When true, the API will return only protected pods
type GetAppTelemetriesProtectionStatus string

const (
	GetAppTelemetriesProtectionStatusFull           GetAppTelemetriesProtectionStatus = "FULL"
	GetAppTelemetriesProtectionStatusDeploymentOnly GetAppTelemetriesProtectionStatus = "DEPLOYMENT_ONLY"
	GetAppTelemetriesProtectionStatusConnectionOnly GetAppTelemetriesProtectionStatus = "CONNECTION_ONLY"
	GetAppTelemetriesProtectionStatusDisabled       GetAppTelemetriesProtectionStatus = "DISABLED"
	GetAppTelemetriesProtectionStatusAll            GetAppTelemetriesProtectionStatus = "ALL"
)

func (e GetAppTelemetriesProtectionStatus) ToPointer() *GetAppTelemetriesProtectionStatus {
	return &e
}

func (e *GetAppTelemetriesProtectionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FULL":
		fallthrough
	case "DEPLOYMENT_ONLY":
		fallthrough
	case "CONNECTION_ONLY":
		fallthrough
	case "DISABLED":
		fallthrough
	case "ALL":
		*e = GetAppTelemetriesProtectionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAppTelemetriesProtectionStatus: %v", v)
	}
}

type GetAppTelemetriesResult string

const (
	GetAppTelemetriesResultAllow  GetAppTelemetriesResult = "ALLOW"
	GetAppTelemetriesResultDetect GetAppTelemetriesResult = "DETECT"
	GetAppTelemetriesResultBlock  GetAppTelemetriesResult = "BLOCK"
)

func (e GetAppTelemetriesResult) ToPointer() *GetAppTelemetriesResult {
	return &e
}

func (e *GetAppTelemetriesResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "DETECT":
		fallthrough
	case "BLOCK":
		*e = GetAppTelemetriesResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAppTelemetriesResult: %v", v)
	}
}

// GetAppTelemetriesSortDir - sorting direction
type GetAppTelemetriesSortDir string

const (
	GetAppTelemetriesSortDirAsc  GetAppTelemetriesSortDir = "ASC"
	GetAppTelemetriesSortDirDesc GetAppTelemetriesSortDir = "DESC"
)

func (e GetAppTelemetriesSortDir) ToPointer() *GetAppTelemetriesSortDir {
	return &e
}

func (e *GetAppTelemetriesSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetAppTelemetriesSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAppTelemetriesSortDir: %v", v)
	}
}

// GetAppTelemetriesSortKey - sort key
type GetAppTelemetriesSortKey string

const (
	GetAppTelemetriesSortKeyAppName         GetAppTelemetriesSortKey = "appName"
	GetAppTelemetriesSortKeyAppType         GetAppTelemetriesSortKey = "appType"
	GetAppTelemetriesSortKeyExecutable      GetAppTelemetriesSortKey = "executable"
	GetAppTelemetriesSortKeyEnvironmentName GetAppTelemetriesSortKey = "environmentName"
	GetAppTelemetriesSortKeyRisk            GetAppTelemetriesSortKey = "risk"
	GetAppTelemetriesSortKeyStatus          GetAppTelemetriesSortKey = "status"
	GetAppTelemetriesSortKeyStartTime       GetAppTelemetriesSortKey = "startTime"
	GetAppTelemetriesSortKeyFinishTime      GetAppTelemetriesSortKey = "finishTime"
	GetAppTelemetriesSortKeyWorkloadRisk    GetAppTelemetriesSortKey = "workloadRisk"
)

func (e GetAppTelemetriesSortKey) ToPointer() *GetAppTelemetriesSortKey {
	return &e
}

func (e *GetAppTelemetriesSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appName":
		fallthrough
	case "appType":
		fallthrough
	case "executable":
		fallthrough
	case "environmentName":
		fallthrough
	case "risk":
		fallthrough
	case "status":
		fallthrough
	case "startTime":
		fallthrough
	case "finishTime":
		fallthrough
	case "workloadRisk":
		*e = GetAppTelemetriesSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAppTelemetriesSortKey: %v", v)
	}
}

type GetAppTelemetriesWorkloadRisks string

const (
	GetAppTelemetriesWorkloadRisksLow      GetAppTelemetriesWorkloadRisks = "LOW"
	GetAppTelemetriesWorkloadRisksMedium   GetAppTelemetriesWorkloadRisks = "MEDIUM"
	GetAppTelemetriesWorkloadRisksHigh     GetAppTelemetriesWorkloadRisks = "HIGH"
	GetAppTelemetriesWorkloadRisksCritical GetAppTelemetriesWorkloadRisks = "CRITICAL"
)

func (e GetAppTelemetriesWorkloadRisks) ToPointer() *GetAppTelemetriesWorkloadRisks {
	return &e
}

func (e *GetAppTelemetriesWorkloadRisks) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = GetAppTelemetriesWorkloadRisks(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAppTelemetriesWorkloadRisks: %v", v)
	}
}

type GetAppTelemetriesRequest struct {
	// Defined App name
	AppName []string `queryParam:"style=form,explode=false,name=appName"`
	// Empty string means no filtering. "UNDEFINED" means telemetries with no App type
	AppType []string `queryParam:"style=form,explode=false,name=appType"`
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// End date of the query
	EndTime time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// Empty string means no filtering. "UNDEFINED" means telemetries with no App type
	EnvironmentName []string `queryParam:"style=form,explode=false,name=environmentName"`
	Executable      []string `queryParam:"style=form,explode=false,name=executable"`
	// When true, the API will filter out "OS Internal" and "User OS Internal" App types
	HideInternals *bool `default:"false" queryParam:"style=form,explode=true,name=hideInternals"`
	// Highest DockerfileScan Result
	HighestDockerfileScanResult []string `queryParam:"style=form,explode=false,name=highestDockerfileScanResult"`
	// Defined host name
	Host []string `queryParam:"style=form,explode=false,name=host"`
	// Array of images id
	ImagesID []string `queryParam:"style=form,explode=false,name=imagesId"`
	// app is identified filter
	IsIdentified *bool `queryParam:"style=form,explode=true,name=isIdentified"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// namespace filter. a base 64 representation of a list of NamespacesFilter definition object
	NamespacesFilter *string `queryParam:"style=form,explode=true,name=namespacesFilter"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// When true, the API will return only protected pods
	ProtectionStatus *GetAppTelemetriesProtectionStatus `default:"ALL" queryParam:"style=form,explode=true,name=protectionStatus"`
	// app result filter
	Result []GetAppTelemetriesResult `queryParam:"style=form,explode=false,name=result"`
	// When true, the telemetries API will only return entries with the App name
	ShowOnlyEntriesWithAppName *bool `default:"false" queryParam:"style=form,explode=true,name=showOnlyEntriesWithAppName"`
	// When true, the API will only return entries that violate the active policy
	ShowOnlyViolations *bool `queryParam:"style=form,explode=true,name=showOnlyViolations"`
	// When true, the telemetries API will also return workloads that are part of the Kubernetes system
	ShowSystemPods *bool `default:"false" queryParam:"style=form,explode=true,name=showSystemPods"`
	// sorting direction
	SortDir *GetAppTelemetriesSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey GetAppTelemetriesSortKey `queryParam:"style=form,explode=true,name=sortKey"`
	// Start date of the query
	StartTime time.Time `queryParam:"style=form,explode=true,name=startTime"`
	// App status
	Status []string `queryParam:"style=form,explode=false,name=status"`
	// Highest vulnerability
	VulnerabilityLevelsFilter []string `queryParam:"style=form,explode=false,name=vulnerabilityLevelsFilter"`
	// workloadRisk filter
	WorkloadRisks []GetAppTelemetriesWorkloadRisks `queryParam:"style=form,explode=false,name=workloadRisks"`
}

func (g GetAppTelemetriesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAppTelemetriesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAppTelemetriesRequest) GetAppName() []string {
	if o == nil {
		return nil
	}
	return o.AppName
}

func (o *GetAppTelemetriesRequest) GetAppType() []string {
	if o == nil {
		return nil
	}
	return o.AppType
}

func (o *GetAppTelemetriesRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetAppTelemetriesRequest) GetEndTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndTime
}

func (o *GetAppTelemetriesRequest) GetEnvironmentName() []string {
	if o == nil {
		return nil
	}
	return o.EnvironmentName
}

func (o *GetAppTelemetriesRequest) GetExecutable() []string {
	if o == nil {
		return nil
	}
	return o.Executable
}

func (o *GetAppTelemetriesRequest) GetHideInternals() *bool {
	if o == nil {
		return nil
	}
	return o.HideInternals
}

func (o *GetAppTelemetriesRequest) GetHighestDockerfileScanResult() []string {
	if o == nil {
		return nil
	}
	return o.HighestDockerfileScanResult
}

func (o *GetAppTelemetriesRequest) GetHost() []string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *GetAppTelemetriesRequest) GetImagesID() []string {
	if o == nil {
		return nil
	}
	return o.ImagesID
}

func (o *GetAppTelemetriesRequest) GetIsIdentified() *bool {
	if o == nil {
		return nil
	}
	return o.IsIdentified
}

func (o *GetAppTelemetriesRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetAppTelemetriesRequest) GetNamespacesFilter() *string {
	if o == nil {
		return nil
	}
	return o.NamespacesFilter
}

func (o *GetAppTelemetriesRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetAppTelemetriesRequest) GetProtectionStatus() *GetAppTelemetriesProtectionStatus {
	if o == nil {
		return nil
	}
	return o.ProtectionStatus
}

func (o *GetAppTelemetriesRequest) GetResult() []GetAppTelemetriesResult {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetAppTelemetriesRequest) GetShowOnlyEntriesWithAppName() *bool {
	if o == nil {
		return nil
	}
	return o.ShowOnlyEntriesWithAppName
}

func (o *GetAppTelemetriesRequest) GetShowOnlyViolations() *bool {
	if o == nil {
		return nil
	}
	return o.ShowOnlyViolations
}

func (o *GetAppTelemetriesRequest) GetShowSystemPods() *bool {
	if o == nil {
		return nil
	}
	return o.ShowSystemPods
}

func (o *GetAppTelemetriesRequest) GetSortDir() *GetAppTelemetriesSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetAppTelemetriesRequest) GetSortKey() GetAppTelemetriesSortKey {
	if o == nil {
		return GetAppTelemetriesSortKey("")
	}
	return o.SortKey
}

func (o *GetAppTelemetriesRequest) GetStartTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartTime
}

func (o *GetAppTelemetriesRequest) GetStatus() []string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetAppTelemetriesRequest) GetVulnerabilityLevelsFilter() []string {
	if o == nil {
		return nil
	}
	return o.VulnerabilityLevelsFilter
}

func (o *GetAppTelemetriesRequest) GetWorkloadRisks() []GetAppTelemetriesWorkloadRisks {
	if o == nil {
		return nil
	}
	return o.WorkloadRisks
}

type GetAppTelemetriesResponse struct {
	// Success
	AppTelemetries []shared.AppTelemetry
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetAppTelemetriesResponse) GetAppTelemetries() []shared.AppTelemetry {
	if o == nil {
		return nil
	}
	return o.AppTelemetries
}

func (o *GetAppTelemetriesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAppTelemetriesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAppTelemetriesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

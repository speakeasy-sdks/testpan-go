// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

// QueryParamPermissionRisk - the risk to filter by
type QueryParamPermissionRisk string

const (
	QueryParamPermissionRiskNoRisk   QueryParamPermissionRisk = "NO_RISK"
	QueryParamPermissionRiskMedium   QueryParamPermissionRisk = "MEDIUM"
	QueryParamPermissionRiskHigh     QueryParamPermissionRisk = "HIGH"
	QueryParamPermissionRiskApproved QueryParamPermissionRisk = "APPROVED"
)

func (e QueryParamPermissionRisk) ToPointer() *QueryParamPermissionRisk {
	return &e
}

func (e *QueryParamPermissionRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_RISK":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "APPROVED":
		*e = QueryParamPermissionRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamPermissionRisk: %v", v)
	}
}

// GetRiskAssessmentPermissionsQueryParamSortDir - sorting direction
type GetRiskAssessmentPermissionsQueryParamSortDir string

const (
	GetRiskAssessmentPermissionsQueryParamSortDirAsc  GetRiskAssessmentPermissionsQueryParamSortDir = "ASC"
	GetRiskAssessmentPermissionsQueryParamSortDirDesc GetRiskAssessmentPermissionsQueryParamSortDir = "DESC"
)

func (e GetRiskAssessmentPermissionsQueryParamSortDir) ToPointer() *GetRiskAssessmentPermissionsQueryParamSortDir {
	return &e
}

func (e *GetRiskAssessmentPermissionsQueryParamSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetRiskAssessmentPermissionsQueryParamSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRiskAssessmentPermissionsQueryParamSortDir: %v", v)
	}
}

// GetRiskAssessmentPermissionsQueryParamSortKey - sort key
type GetRiskAssessmentPermissionsQueryParamSortKey string

const (
	GetRiskAssessmentPermissionsQueryParamSortKeyPermissionRisk GetRiskAssessmentPermissionsQueryParamSortKey = "permissionRisk"
)

func (e GetRiskAssessmentPermissionsQueryParamSortKey) ToPointer() *GetRiskAssessmentPermissionsQueryParamSortKey {
	return &e
}

func (e *GetRiskAssessmentPermissionsQueryParamSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "permissionRisk":
		*e = GetRiskAssessmentPermissionsQueryParamSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRiskAssessmentPermissionsQueryParamSortKey: %v", v)
	}
}

type GetRiskAssessmentPermissionsRequest struct {
	// the clusters ids to filter by
	ClustersIds []string `queryParam:"style=form,explode=true,name=clustersIds"`
	// include systems default owners
	IncludeSystemOwners *bool `default:"false" queryParam:"style=form,explode=true,name=includeSystemOwners"`
	// the risk to filter by
	PermissionRisk *QueryParamPermissionRisk `queryParam:"style=form,explode=true,name=permissionRisk"`
	// sorting direction
	SortDir *GetRiskAssessmentPermissionsQueryParamSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey *GetRiskAssessmentPermissionsQueryParamSortKey `default:"permissionRisk" queryParam:"style=form,explode=true,name=sortKey"`
}

func (g GetRiskAssessmentPermissionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRiskAssessmentPermissionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetRiskAssessmentPermissionsRequest) GetClustersIds() []string {
	if o == nil {
		return nil
	}
	return o.ClustersIds
}

func (o *GetRiskAssessmentPermissionsRequest) GetIncludeSystemOwners() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeSystemOwners
}

func (o *GetRiskAssessmentPermissionsRequest) GetPermissionRisk() *QueryParamPermissionRisk {
	if o == nil {
		return nil
	}
	return o.PermissionRisk
}

func (o *GetRiskAssessmentPermissionsRequest) GetSortDir() *GetRiskAssessmentPermissionsQueryParamSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetRiskAssessmentPermissionsRequest) GetSortKey() *GetRiskAssessmentPermissionsQueryParamSortKey {
	if o == nil {
		return nil
	}
	return o.SortKey
}

type GetRiskAssessmentPermissionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	Classes []shared.ClusterPermission
}

func (o *GetRiskAssessmentPermissionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRiskAssessmentPermissionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRiskAssessmentPermissionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetRiskAssessmentPermissionsResponse) GetClasses() []shared.ClusterPermission {
	if o == nil {
		return nil
	}
	return o.Classes
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"time"
)

// ConnectionViolation - If there is a connection violation according to the policy - this object will hold the violation info
type ConnectionViolation struct {
	DefaultRule   *DefaultConnectionRule     `json:"defaultRule,omitempty"`
	DirectPodRule *DirectPodIPConnectionRule `json:"directPodRule,omitempty"`
	// A rule that states what Apps are allowed to communicate with each other.
	EncryptRule      *ConnectionsRule  `json:"encryptRule,omitempty"`
	EncryptionReason *EncryptionReason `json:"encryptionReason,omitempty"`
	InterceptionRule *string           `json:"interceptionRule,omitempty"`
	LastViolation    *time.Time        `json:"lastViolation,omitempty"`
	// A rule that states what Apps are allowed to communicate with each other.
	UserRule *ConnectionsRule `json:"userRule,omitempty"`
}

func (c ConnectionViolation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConnectionViolation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConnectionViolation) GetDefaultRule() *DefaultConnectionRule {
	if o == nil {
		return nil
	}
	return o.DefaultRule
}

func (o *ConnectionViolation) GetDirectPodRule() *DirectPodIPConnectionRule {
	if o == nil {
		return nil
	}
	return o.DirectPodRule
}

func (o *ConnectionViolation) GetEncryptRule() *ConnectionsRule {
	if o == nil {
		return nil
	}
	return o.EncryptRule
}

func (o *ConnectionViolation) GetEncryptionReason() *EncryptionReason {
	if o == nil {
		return nil
	}
	return o.EncryptionReason
}

func (o *ConnectionViolation) GetInterceptionRule() *string {
	if o == nil {
		return nil
	}
	return o.InterceptionRule
}

func (o *ConnectionViolation) GetLastViolation() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastViolation
}

func (o *ConnectionViolation) GetUserRule() *ConnectionsRule {
	if o == nil {
		return nil
	}
	return o.UserRule
}

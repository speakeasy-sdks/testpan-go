// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Layer7SettingsPartLayer7Protocol string

const (
	Layer7SettingsPartLayer7ProtocolHTTPLayer7Part      Layer7SettingsPartLayer7Protocol = "HttpLayer7Part"
	Layer7SettingsPartLayer7ProtocolKafkaLayerPart      Layer7SettingsPartLayer7Protocol = "KafkaLayerPart"
	Layer7SettingsPartLayer7ProtocolAPIServiceLayerPart Layer7SettingsPartLayer7Protocol = "ApiServiceLayerPart"
)

func (e Layer7SettingsPartLayer7Protocol) ToPointer() *Layer7SettingsPartLayer7Protocol {
	return &e
}

func (e *Layer7SettingsPartLayer7Protocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HttpLayer7Part":
		fallthrough
	case "KafkaLayerPart":
		fallthrough
	case "ApiServiceLayerPart":
		*e = Layer7SettingsPartLayer7Protocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Layer7SettingsPartLayer7Protocol: %v", v)
	}
}

type Layer7SettingsPart struct {
	Layer7Protocol *Layer7SettingsPartLayer7Protocol `json:"layer7Protocol,omitempty"`
}

func (o *Layer7SettingsPart) GetLayer7Protocol() *Layer7SettingsPartLayer7Protocol {
	if o == nil {
		return nil
	}
	return o.Layer7Protocol
}

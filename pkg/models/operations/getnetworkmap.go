// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
	"time"
)

// GetNetworkMapAPIRisk - minimum api risk level
type GetNetworkMapAPIRisk string

const (
	GetNetworkMapAPIRiskLow      GetNetworkMapAPIRisk = "LOW"
	GetNetworkMapAPIRiskMedium   GetNetworkMapAPIRisk = "MEDIUM"
	GetNetworkMapAPIRiskHigh     GetNetworkMapAPIRisk = "HIGH"
	GetNetworkMapAPIRiskCritical GetNetworkMapAPIRisk = "CRITICAL"
	GetNetworkMapAPIRiskNeutral  GetNetworkMapAPIRisk = "NEUTRAL"
	GetNetworkMapAPIRiskUnknown  GetNetworkMapAPIRisk = "UNKNOWN"
)

func (e GetNetworkMapAPIRisk) ToPointer() *GetNetworkMapAPIRisk {
	return &e
}

func (e *GetNetworkMapAPIRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		fallthrough
	case "NEUTRAL":
		fallthrough
	case "UNKNOWN":
		*e = GetNetworkMapAPIRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkMapAPIRisk: %v", v)
	}
}

type GetNetworkMapRequest struct {
	// minimum api risk level
	APIRisk *GetNetworkMapAPIRisk `queryParam:"style=form,explode=true,name=apiRisk"`
	// Array of App names
	Apps []string `queryParam:"style=form,explode=false,name=apps"`
	// End date of the query
	EndTime time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// Array of environments names
	Environments []string `queryParam:"style=form,explode=false,name=environments"`
	// Array of App/pod names to exclude
	ExcludeApps []string `queryParam:"style=form,explode=false,name=excludeApps"`
	// When true, the API will aggregate Apps that are on the same environment
	GroupAppsOnTheSameEnvironment *bool `default:"false" queryParam:"style=form,explode=true,name=groupAppsOnTheSameEnvironment"`
	// When true, the API will ignore connections coming from external IP addresses
	IgnoreExternalConnection *bool `default:"false" queryParam:"style=form,explode=true,name=ignoreExternalConnection"`
	// should run as background job or not
	IsBackgroundJob *bool `default:"true" queryParam:"style=form,explode=true,name=isBackgroundJob"`
	// Array of labels. Each label is a string with format key:value
	Labels []string `queryParam:"style=form,explode=false,name=labels"`
	// Array of namespaces ids
	Namespaces []string `queryParam:"style=form,explode=false,name=namespaces"`
	// When true, the API will only return Apps with connections
	ShowOnlyAppsWithConnections *bool `default:"false" queryParam:"style=form,explode=true,name=showOnlyAppsWithConnections"`
	// When true, the API will only return Apps that violated the active policy
	ShowOnlyAppsWithViolations *bool `default:"false" queryParam:"style=form,explode=true,name=showOnlyAppsWithViolations"`
	// When true, the API will only return connections between environments
	ShowOnlyConnectionsBetweenEnvironments *bool `default:"false" queryParam:"style=form,explode=true,name=showOnlyConnectionsBetweenEnvironments"`
	// When true, the API will only return connections that violate the active policy
	ShowOnlyConnectionsWithViolations *bool `default:"false" queryParam:"style=form,explode=true,name=showOnlyConnectionsWithViolations"`
	// Start date of the query
	StartTime time.Time `queryParam:"style=form,explode=true,name=startTime"`
}

func (g GetNetworkMapRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetNetworkMapRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkMapRequest) GetAPIRisk() *GetNetworkMapAPIRisk {
	if o == nil {
		return nil
	}
	return o.APIRisk
}

func (o *GetNetworkMapRequest) GetApps() []string {
	if o == nil {
		return nil
	}
	return o.Apps
}

func (o *GetNetworkMapRequest) GetEndTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndTime
}

func (o *GetNetworkMapRequest) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *GetNetworkMapRequest) GetExcludeApps() []string {
	if o == nil {
		return nil
	}
	return o.ExcludeApps
}

func (o *GetNetworkMapRequest) GetGroupAppsOnTheSameEnvironment() *bool {
	if o == nil {
		return nil
	}
	return o.GroupAppsOnTheSameEnvironment
}

func (o *GetNetworkMapRequest) GetIgnoreExternalConnection() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreExternalConnection
}

func (o *GetNetworkMapRequest) GetIsBackgroundJob() *bool {
	if o == nil {
		return nil
	}
	return o.IsBackgroundJob
}

func (o *GetNetworkMapRequest) GetLabels() []string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *GetNetworkMapRequest) GetNamespaces() []string {
	if o == nil {
		return nil
	}
	return o.Namespaces
}

func (o *GetNetworkMapRequest) GetShowOnlyAppsWithConnections() *bool {
	if o == nil {
		return nil
	}
	return o.ShowOnlyAppsWithConnections
}

func (o *GetNetworkMapRequest) GetShowOnlyAppsWithViolations() *bool {
	if o == nil {
		return nil
	}
	return o.ShowOnlyAppsWithViolations
}

func (o *GetNetworkMapRequest) GetShowOnlyConnectionsBetweenEnvironments() *bool {
	if o == nil {
		return nil
	}
	return o.ShowOnlyConnectionsBetweenEnvironments
}

func (o *GetNetworkMapRequest) GetShowOnlyConnectionsWithViolations() *bool {
	if o == nil {
		return nil
	}
	return o.ShowOnlyConnectionsWithViolations
}

func (o *GetNetworkMapRequest) GetStartTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartTime
}

type GetNetworkMapResponse struct {
	// Accepted
	BackgroundJobResponse *shared.BackgroundJobResponse
	// HTTP response content type for this operation
	ContentType string
	// Success
	NetworkMap *shared.NetworkMap
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetNetworkMapResponse) GetBackgroundJobResponse() *shared.BackgroundJobResponse {
	if o == nil {
		return nil
	}
	return o.BackgroundJobResponse
}

func (o *GetNetworkMapResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetNetworkMapResponse) GetNetworkMap() *shared.NetworkMap {
	if o == nil {
		return nil
	}
	return o.NetworkMap
}

func (o *GetNetworkMapResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetNetworkMapResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

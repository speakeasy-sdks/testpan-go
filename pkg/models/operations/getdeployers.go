// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

// GetDeployersQueryParamSortDir - sorting direction
type GetDeployersQueryParamSortDir string

const (
	GetDeployersQueryParamSortDirAsc  GetDeployersQueryParamSortDir = "ASC"
	GetDeployersQueryParamSortDirDesc GetDeployersQueryParamSortDir = "DESC"
)

func (e GetDeployersQueryParamSortDir) ToPointer() *GetDeployersQueryParamSortDir {
	return &e
}

func (e *GetDeployersQueryParamSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetDeployersQueryParamSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployersQueryParamSortDir: %v", v)
	}
}

// GetDeployersQueryParamSortKey - sort key
type GetDeployersQueryParamSortKey string

const (
	GetDeployersQueryParamSortKeyDeployer GetDeployersQueryParamSortKey = "deployer"
	GetDeployersQueryParamSortKeyType     GetDeployersQueryParamSortKey = "type"
)

func (e GetDeployersQueryParamSortKey) ToPointer() *GetDeployersQueryParamSortKey {
	return &e
}

func (e *GetDeployersQueryParamSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deployer":
		fallthrough
	case "type":
		*e = GetDeployersQueryParamSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployersQueryParamSortKey: %v", v)
	}
}

type GetDeployersRequest struct {
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// Filter deployers by name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// Filter deployers by rule creation
	RuleCreation *bool `queryParam:"style=form,explode=true,name=ruleCreation"`
	// Filter deployers by security checks
	SecurityCheck *bool `queryParam:"style=form,explode=true,name=securityCheck"`
	// sorting direction
	SortDir *GetDeployersQueryParamSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey GetDeployersQueryParamSortKey `queryParam:"style=form,explode=true,name=sortKey"`
}

func (g GetDeployersRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDeployersRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetDeployersRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetDeployersRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetDeployersRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetDeployersRequest) GetRuleCreation() *bool {
	if o == nil {
		return nil
	}
	return o.RuleCreation
}

func (o *GetDeployersRequest) GetSecurityCheck() *bool {
	if o == nil {
		return nil
	}
	return o.SecurityCheck
}

func (o *GetDeployersRequest) GetSortDir() *GetDeployersQueryParamSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetDeployersRequest) GetSortKey() GetDeployersQueryParamSortKey {
	if o == nil {
		return GetDeployersQueryParamSortKey("")
	}
	return o.SortKey
}

type GetDeployersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	Classes []shared.Deployer
}

func (o *GetDeployersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetDeployersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetDeployersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetDeployersResponse) GetClasses() []shared.Deployer {
	if o == nil {
		return nil
	}
	return o.Classes
}

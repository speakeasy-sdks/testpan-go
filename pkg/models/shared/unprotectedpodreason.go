// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UnprotectedPodReasonType string

const (
	UnprotectedPodReasonTypeNamespaceUnprotected           UnprotectedPodReasonType = "NAMESPACE_UNPROTECTED"
	UnprotectedPodReasonTypeMissingSidecars                UnprotectedPodReasonType = "MISSING_SIDECARS"
	UnprotectedPodReasonTypeHostNetwork                    UnprotectedPodReasonType = "HOST_NETWORK"
	UnprotectedPodReasonTypeIstioInjectFalseAnnotation     UnprotectedPodReasonType = "ISTIO_INJECT_FALSE_ANNOTATION"
	UnprotectedPodReasonTypeIstioInjectFalseLabel          UnprotectedPodReasonType = "ISTIO_INJECT_FALSE_LABEL"
	UnprotectedPodReasonTypePortshiftInjectFalseAnnotation UnprotectedPodReasonType = "PORTSHIFT_INJECT_FALSE_ANNOTATION"
	UnprotectedPodReasonTypePortshiftInjectFalseLabel      UnprotectedPodReasonType = "PORTSHIFT_INJECT_FALSE_LABEL"
)

func (e UnprotectedPodReasonType) ToPointer() *UnprotectedPodReasonType {
	return &e
}

func (e *UnprotectedPodReasonType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAMESPACE_UNPROTECTED":
		fallthrough
	case "MISSING_SIDECARS":
		fallthrough
	case "HOST_NETWORK":
		fallthrough
	case "ISTIO_INJECT_FALSE_ANNOTATION":
		fallthrough
	case "ISTIO_INJECT_FALSE_LABEL":
		fallthrough
	case "PORTSHIFT_INJECT_FALSE_ANNOTATION":
		fallthrough
	case "PORTSHIFT_INJECT_FALSE_LABEL":
		*e = UnprotectedPodReasonType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnprotectedPodReasonType: %v", v)
	}
}

type UnprotectedPodReason struct {
	Name  *string                   `json:"name,omitempty"`
	Type  *UnprotectedPodReasonType `json:"type,omitempty"`
	Value *string                   `json:"value,omitempty"`
}

func (o *UnprotectedPodReason) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UnprotectedPodReason) GetType() *UnprotectedPodReasonType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UnprotectedPodReason) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

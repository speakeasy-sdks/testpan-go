// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
	"time"
)

// GetConnectionTelemetriesLogicalOperator - Logical operator between the source group and the target group filters
type GetConnectionTelemetriesLogicalOperator string

const (
	GetConnectionTelemetriesLogicalOperatorAnd GetConnectionTelemetriesLogicalOperator = "and"
	GetConnectionTelemetriesLogicalOperatorOr  GetConnectionTelemetriesLogicalOperator = "or"
)

func (e GetConnectionTelemetriesLogicalOperator) ToPointer() *GetConnectionTelemetriesLogicalOperator {
	return &e
}

func (e *GetConnectionTelemetriesLogicalOperator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "and":
		fallthrough
	case "or":
		*e = GetConnectionTelemetriesLogicalOperator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesLogicalOperator: %v", v)
	}
}

type GetConnectionTelemetriesResult string

const (
	GetConnectionTelemetriesResultDetect  GetConnectionTelemetriesResult = "DETECT"
	GetConnectionTelemetriesResultBlock   GetConnectionTelemetriesResult = "BLOCK"
	GetConnectionTelemetriesResultAllow   GetConnectionTelemetriesResult = "ALLOW"
	GetConnectionTelemetriesResultEncrypt GetConnectionTelemetriesResult = "ENCRYPT"
)

func (e GetConnectionTelemetriesResult) ToPointer() *GetConnectionTelemetriesResult {
	return &e
}

func (e *GetConnectionTelemetriesResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DETECT":
		fallthrough
	case "BLOCK":
		fallthrough
	case "ALLOW":
		fallthrough
	case "ENCRYPT":
		*e = GetConnectionTelemetriesResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesResult: %v", v)
	}
}

// GetConnectionTelemetriesSortDir - sorting direction
type GetConnectionTelemetriesSortDir string

const (
	GetConnectionTelemetriesSortDirAsc  GetConnectionTelemetriesSortDir = "ASC"
	GetConnectionTelemetriesSortDirDesc GetConnectionTelemetriesSortDir = "DESC"
)

func (e GetConnectionTelemetriesSortDir) ToPointer() *GetConnectionTelemetriesSortDir {
	return &e
}

func (e *GetConnectionTelemetriesSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetConnectionTelemetriesSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesSortDir: %v", v)
	}
}

// GetConnectionTelemetriesSortKey - sort key
type GetConnectionTelemetriesSortKey string

const (
	GetConnectionTelemetriesSortKeySourceAppName         GetConnectionTelemetriesSortKey = "sourceAppName"
	GetConnectionTelemetriesSortKeySourceAppType         GetConnectionTelemetriesSortKey = "sourceAppType"
	GetConnectionTelemetriesSortKeySourceEnvironmentName GetConnectionTelemetriesSortKey = "sourceEnvironmentName"
	GetConnectionTelemetriesSortKeySourceExecutable      GetConnectionTelemetriesSortKey = "sourceExecutable"
	GetConnectionTelemetriesSortKeySourceRisk            GetConnectionTelemetriesSortKey = "sourceRisk"
	GetConnectionTelemetriesSortKeySourceHostName        GetConnectionTelemetriesSortKey = "sourceHostName"
	GetConnectionTelemetriesSortKeyTargetAppName         GetConnectionTelemetriesSortKey = "targetAppName"
	GetConnectionTelemetriesSortKeyTargetAppType         GetConnectionTelemetriesSortKey = "targetAppType"
	GetConnectionTelemetriesSortKeyTargetEnvironmentName GetConnectionTelemetriesSortKey = "targetEnvironmentName"
	GetConnectionTelemetriesSortKeyTargetExecutable      GetConnectionTelemetriesSortKey = "targetExecutable"
	GetConnectionTelemetriesSortKeyTargetRisk            GetConnectionTelemetriesSortKey = "targetRisk"
	GetConnectionTelemetriesSortKeyTargetHostName        GetConnectionTelemetriesSortKey = "targetHostName"
	GetConnectionTelemetriesSortKeyFirstSeen             GetConnectionTelemetriesSortKey = "firstSeen"
	GetConnectionTelemetriesSortKeyLastSeen              GetConnectionTelemetriesSortKey = "lastSeen"
	GetConnectionTelemetriesSortKeyTotal                 GetConnectionTelemetriesSortKey = "total"
)

func (e GetConnectionTelemetriesSortKey) ToPointer() *GetConnectionTelemetriesSortKey {
	return &e
}

func (e *GetConnectionTelemetriesSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sourceAppName":
		fallthrough
	case "sourceAppType":
		fallthrough
	case "sourceEnvironmentName":
		fallthrough
	case "sourceExecutable":
		fallthrough
	case "sourceRisk":
		fallthrough
	case "sourceHostName":
		fallthrough
	case "targetAppName":
		fallthrough
	case "targetAppType":
		fallthrough
	case "targetEnvironmentName":
		fallthrough
	case "targetExecutable":
		fallthrough
	case "targetRisk":
		fallthrough
	case "targetHostName":
		fallthrough
	case "firstSeen":
		fallthrough
	case "lastSeen":
		fallthrough
	case "total":
		*e = GetConnectionTelemetriesSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesSortKey: %v", v)
	}
}

type GetConnectionTelemetriesSourceRisk string

const (
	GetConnectionTelemetriesSourceRiskHigh   GetConnectionTelemetriesSourceRisk = "HIGH"
	GetConnectionTelemetriesSourceRiskMedium GetConnectionTelemetriesSourceRisk = "MEDIUM"
	GetConnectionTelemetriesSourceRiskLow    GetConnectionTelemetriesSourceRisk = "LOW"
)

func (e GetConnectionTelemetriesSourceRisk) ToPointer() *GetConnectionTelemetriesSourceRisk {
	return &e
}

func (e *GetConnectionTelemetriesSourceRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = GetConnectionTelemetriesSourceRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesSourceRisk: %v", v)
	}
}

type GetConnectionTelemetriesTargetRisk string

const (
	GetConnectionTelemetriesTargetRiskHigh   GetConnectionTelemetriesTargetRisk = "HIGH"
	GetConnectionTelemetriesTargetRiskMedium GetConnectionTelemetriesTargetRisk = "MEDIUM"
	GetConnectionTelemetriesTargetRiskLow    GetConnectionTelemetriesTargetRisk = "LOW"
)

func (e GetConnectionTelemetriesTargetRisk) ToPointer() *GetConnectionTelemetriesTargetRisk {
	return &e
}

func (e *GetConnectionTelemetriesTargetRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = GetConnectionTelemetriesTargetRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesTargetRisk: %v", v)
	}
}

type GetConnectionTelemetriesRequest struct {
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// End date of the query
	EndTime time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// Logical operator between the source group and the target group filters
	LogicalOperator *GetConnectionTelemetriesLogicalOperator `default:"and" queryParam:"style=form,explode=true,name=logicalOperator"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// connection result filter
	Result []GetConnectionTelemetriesResult `queryParam:"style=form,explode=false,name=result"`
	// When true, the API will only return entries that violate the active policy
	ShowOnlyViolations *bool `queryParam:"style=form,explode=true,name=showOnlyViolations"`
	// sorting direction
	SortDir *GetConnectionTelemetriesSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey               GetConnectionTelemetriesSortKey `queryParam:"style=form,explode=true,name=sortKey"`
	SourceAppName         []string                        `queryParam:"style=form,explode=false,name=sourceAppName"`
	SourceEnvironmentName []string                        `queryParam:"style=form,explode=false,name=sourceEnvironmentName"`
	SourceExecutable      []string                        `queryParam:"style=form,explode=false,name=sourceExecutable"`
	SourceHostName        []string                        `queryParam:"style=form,explode=false,name=sourceHostName"`
	// namespace filter for source in connection telemetries, a base 64 representation of a NamespacesFilter definition object
	SourceNamespacesFilter *string                              `queryParam:"style=form,explode=true,name=sourceNamespacesFilter"`
	SourceRisk             []GetConnectionTelemetriesSourceRisk `queryParam:"style=form,explode=false,name=sourceRisk"`
	// Start date of the query
	StartTime             time.Time `queryParam:"style=form,explode=true,name=startTime"`
	TargetAppName         []string  `queryParam:"style=form,explode=false,name=targetAppName"`
	TargetEnvironmentName []string  `queryParam:"style=form,explode=false,name=targetEnvironmentName"`
	TargetExecutable      []string  `queryParam:"style=form,explode=false,name=targetExecutable"`
	TargetHostName        []string  `queryParam:"style=form,explode=false,name=targetHostName"`
	// namespace filter for target in connection telemetries. a base 64 representation of a NamespacesFilter definition object
	TargetNamespacesFilter *string                              `queryParam:"style=form,explode=true,name=targetNamespacesFilter"`
	TargetRisk             []GetConnectionTelemetriesTargetRisk `queryParam:"style=form,explode=false,name=targetRisk"`
}

func (g GetConnectionTelemetriesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetConnectionTelemetriesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetConnectionTelemetriesRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetConnectionTelemetriesRequest) GetEndTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndTime
}

func (o *GetConnectionTelemetriesRequest) GetLogicalOperator() *GetConnectionTelemetriesLogicalOperator {
	if o == nil {
		return nil
	}
	return o.LogicalOperator
}

func (o *GetConnectionTelemetriesRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetConnectionTelemetriesRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetConnectionTelemetriesRequest) GetResult() []GetConnectionTelemetriesResult {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetConnectionTelemetriesRequest) GetShowOnlyViolations() *bool {
	if o == nil {
		return nil
	}
	return o.ShowOnlyViolations
}

func (o *GetConnectionTelemetriesRequest) GetSortDir() *GetConnectionTelemetriesSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetConnectionTelemetriesRequest) GetSortKey() GetConnectionTelemetriesSortKey {
	if o == nil {
		return GetConnectionTelemetriesSortKey("")
	}
	return o.SortKey
}

func (o *GetConnectionTelemetriesRequest) GetSourceAppName() []string {
	if o == nil {
		return nil
	}
	return o.SourceAppName
}

func (o *GetConnectionTelemetriesRequest) GetSourceEnvironmentName() []string {
	if o == nil {
		return nil
	}
	return o.SourceEnvironmentName
}

func (o *GetConnectionTelemetriesRequest) GetSourceExecutable() []string {
	if o == nil {
		return nil
	}
	return o.SourceExecutable
}

func (o *GetConnectionTelemetriesRequest) GetSourceHostName() []string {
	if o == nil {
		return nil
	}
	return o.SourceHostName
}

func (o *GetConnectionTelemetriesRequest) GetSourceNamespacesFilter() *string {
	if o == nil {
		return nil
	}
	return o.SourceNamespacesFilter
}

func (o *GetConnectionTelemetriesRequest) GetSourceRisk() []GetConnectionTelemetriesSourceRisk {
	if o == nil {
		return nil
	}
	return o.SourceRisk
}

func (o *GetConnectionTelemetriesRequest) GetStartTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartTime
}

func (o *GetConnectionTelemetriesRequest) GetTargetAppName() []string {
	if o == nil {
		return nil
	}
	return o.TargetAppName
}

func (o *GetConnectionTelemetriesRequest) GetTargetEnvironmentName() []string {
	if o == nil {
		return nil
	}
	return o.TargetEnvironmentName
}

func (o *GetConnectionTelemetriesRequest) GetTargetExecutable() []string {
	if o == nil {
		return nil
	}
	return o.TargetExecutable
}

func (o *GetConnectionTelemetriesRequest) GetTargetHostName() []string {
	if o == nil {
		return nil
	}
	return o.TargetHostName
}

func (o *GetConnectionTelemetriesRequest) GetTargetNamespacesFilter() *string {
	if o == nil {
		return nil
	}
	return o.TargetNamespacesFilter
}

func (o *GetConnectionTelemetriesRequest) GetTargetRisk() []GetConnectionTelemetriesTargetRisk {
	if o == nil {
		return nil
	}
	return o.TargetRisk
}

type GetConnectionTelemetriesResponse struct {
	// Success
	ConnectionTelemetries []shared.ConnectionTelemetry
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetConnectionTelemetriesResponse) GetConnectionTelemetries() []shared.ConnectionTelemetry {
	if o == nil {
		return nil
	}
	return o.ConnectionTelemetries
}

func (o *GetConnectionTelemetriesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetConnectionTelemetriesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetConnectionTelemetriesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

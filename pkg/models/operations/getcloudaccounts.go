// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

// GetCloudAccountsSortDir - sorting direction
type GetCloudAccountsSortDir string

const (
	GetCloudAccountsSortDirAsc  GetCloudAccountsSortDir = "ASC"
	GetCloudAccountsSortDirDesc GetCloudAccountsSortDir = "DESC"
)

func (e GetCloudAccountsSortDir) ToPointer() *GetCloudAccountsSortDir {
	return &e
}

func (e *GetCloudAccountsSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetCloudAccountsSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCloudAccountsSortDir: %v", v)
	}
}

// GetCloudAccountsSortKey - sort key
type GetCloudAccountsSortKey string

const (
	GetCloudAccountsSortKeyLastScanned GetCloudAccountsSortKey = "lastScanned"
	GetCloudAccountsSortKeyName        GetCloudAccountsSortKey = "name"
)

func (e GetCloudAccountsSortKey) ToPointer() *GetCloudAccountsSortKey {
	return &e
}

func (e *GetCloudAccountsSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "lastScanned":
		fallthrough
	case "name":
		*e = GetCloudAccountsSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCloudAccountsSortKey: %v", v)
	}
}

type GetCloudAccountsRequest struct {
	// Filter cloud accounts by name
	CloudAccountName *string `queryParam:"style=form,explode=true,name=cloudAccountName"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// When true, the pagination params will be ignored
	NoPagination *bool `queryParam:"style=form,explode=true,name=noPagination"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// Filter cloud accounts by region
	Region *string `queryParam:"style=form,explode=true,name=region"`
	// sorting direction
	SortDir *GetCloudAccountsSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey GetCloudAccountsSortKey `queryParam:"style=form,explode=true,name=sortKey"`
}

func (g GetCloudAccountsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetCloudAccountsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetCloudAccountsRequest) GetCloudAccountName() *string {
	if o == nil {
		return nil
	}
	return o.CloudAccountName
}

func (o *GetCloudAccountsRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetCloudAccountsRequest) GetNoPagination() *bool {
	if o == nil {
		return nil
	}
	return o.NoPagination
}

func (o *GetCloudAccountsRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetCloudAccountsRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetCloudAccountsRequest) GetSortDir() *GetCloudAccountsSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetCloudAccountsRequest) GetSortKey() GetCloudAccountsSortKey {
	if o == nil {
		return GetCloudAccountsSortKey("")
	}
	return o.SortKey
}

type GetCloudAccountsResponse struct {
	// Success
	CloudAccounts []shared.CloudAccount
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetCloudAccountsResponse) GetCloudAccounts() []shared.CloudAccount {
	if o == nil {
		return nil
	}
	return o.CloudAccounts
}

func (o *GetCloudAccountsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetCloudAccountsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetCloudAccountsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"net/http"
)

// PostImagesImageIDVulnerabilitiesIgnoreActionType - The ignore action type (ADD/REMOVE)
type PostImagesImageIDVulnerabilitiesIgnoreActionType string

const (
	PostImagesImageIDVulnerabilitiesIgnoreActionTypeAdd    PostImagesImageIDVulnerabilitiesIgnoreActionType = "ADD"
	PostImagesImageIDVulnerabilitiesIgnoreActionTypeRemove PostImagesImageIDVulnerabilitiesIgnoreActionType = "REMOVE"
)

func (e PostImagesImageIDVulnerabilitiesIgnoreActionType) ToPointer() *PostImagesImageIDVulnerabilitiesIgnoreActionType {
	return &e
}

func (e *PostImagesImageIDVulnerabilitiesIgnoreActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADD":
		fallthrough
	case "REMOVE":
		*e = PostImagesImageIDVulnerabilitiesIgnoreActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostImagesImageIDVulnerabilitiesIgnoreActionType: %v", v)
	}
}

// PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime - The time to snooze the vulnerability
type PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime string

const (
	PostImagesImageIDVulnerabilitiesIgnoreSnoozeTimeAlways PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime = "ALWAYS"
	PostImagesImageIDVulnerabilitiesIgnoreSnoozeTimeYear   PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime = "YEAR"
	PostImagesImageIDVulnerabilitiesIgnoreSnoozeTimeMonth  PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime = "MONTH"
	PostImagesImageIDVulnerabilitiesIgnoreSnoozeTimeWeek   PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime = "WEEK"
)

func (e PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime) ToPointer() *PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime {
	return &e
}

func (e *PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALWAYS":
		fallthrough
	case "YEAR":
		fallthrough
	case "MONTH":
		fallthrough
	case "WEEK":
		*e = PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime: %v", v)
	}
}

type PostImagesImageIDVulnerabilitiesIgnoreRequest struct {
	UUIDList shared.UUIDList `request:"mediaType=application/json"`
	// The ignore action type (ADD/REMOVE)
	ActionType PostImagesImageIDVulnerabilitiesIgnoreActionType `queryParam:"style=form,explode=true,name=actionType"`
	ImageID    string                                           `pathParam:"style=simple,explode=false,name=imageId"`
	// The time to snooze the vulnerability
	SnoozeTime *PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime `queryParam:"style=form,explode=true,name=snoozeTime"`
}

func (o *PostImagesImageIDVulnerabilitiesIgnoreRequest) GetUUIDList() shared.UUIDList {
	if o == nil {
		return shared.UUIDList{}
	}
	return o.UUIDList
}

func (o *PostImagesImageIDVulnerabilitiesIgnoreRequest) GetActionType() PostImagesImageIDVulnerabilitiesIgnoreActionType {
	if o == nil {
		return PostImagesImageIDVulnerabilitiesIgnoreActionType("")
	}
	return o.ActionType
}

func (o *PostImagesImageIDVulnerabilitiesIgnoreRequest) GetImageID() string {
	if o == nil {
		return ""
	}
	return o.ImageID
}

func (o *PostImagesImageIDVulnerabilitiesIgnoreRequest) GetSnoozeTime() *PostImagesImageIDVulnerabilitiesIgnoreSnoozeTime {
	if o == nil {
		return nil
	}
	return o.SnoozeTime
}

type PostImagesImageIDVulnerabilitiesIgnoreResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PostImagesImageIDVulnerabilitiesIgnoreResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostImagesImageIDVulnerabilitiesIgnoreResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostImagesImageIDVulnerabilitiesIgnoreResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

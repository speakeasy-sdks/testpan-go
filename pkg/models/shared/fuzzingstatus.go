// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FuzzingStatus - An enumeration.
type FuzzingStatus string

const (
	FuzzingStatusReady          FuzzingStatus = "READY"
	FuzzingStatusInProgress     FuzzingStatus = "IN_PROGRESS"
	FuzzingStatusDone           FuzzingStatus = "DONE"
	FuzzingStatusError          FuzzingStatus = "ERROR"
	FuzzingStatusUnfuzzable     FuzzingStatus = "UNFUZZABLE"
	FuzzingStatusStopInProgress FuzzingStatus = "STOP_IN_PROGRESS"
	FuzzingStatusCancelled      FuzzingStatus = "CANCELLED"
)

func (e FuzzingStatus) ToPointer() *FuzzingStatus {
	return &e
}

func (e *FuzzingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "READY":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "DONE":
		fallthrough
	case "ERROR":
		fallthrough
	case "UNFUZZABLE":
		fallthrough
	case "STOP_IN_PROGRESS":
		fallthrough
	case "CANCELLED":
		*e = FuzzingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FuzzingStatus: %v", v)
	}
}

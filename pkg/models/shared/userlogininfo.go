// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"time"
)

type UserLoginInfoStatus string

const (
	UserLoginInfoStatusEnabled  UserLoginInfoStatus = "ENABLED"
	UserLoginInfoStatusDisabled UserLoginInfoStatus = "DISABLED"
)

func (e UserLoginInfoStatus) ToPointer() *UserLoginInfoStatus {
	return &e
}

func (e *UserLoginInfoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = UserLoginInfoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserLoginInfoStatus: %v", v)
	}
}

type UserLoginInfo struct {
	// The Secure Application account ID to which the user belongs
	AccountID *string `json:"accountId,omitempty"`
	// K8s security product tier
	AccountTier AccountTier `json:"accountTier"`
	// Mode of the API security
	APISecurity APISecurity `json:"apiSecurity"`
	Description *string     `json:"description,omitempty"`
	// The email of the user.
	Email    *string `json:"email,omitempty"`
	FullName string  `json:"fullName"`
	// ID of the user as created by Secure Application management.
	ID              *string          `json:"id,omitempty"`
	LastLogin       *time.Time       `json:"lastLogin,omitempty"`
	PermissionsMode *PermissionsMode `default:"NORMAL" json:"permissionsMode"`
	PricingUnitType PricingUnitType  `json:"pricingUnitType"`
	// The role of the user
	Role *Role `json:"role,omitempty"`
	// Mode of the Serverless security
	ServerlessSecurity       ServerlessSecurity  `json:"serverlessSecurity"`
	ShouldDisplayEula        *bool               `json:"shouldDisplayEula,omitempty"`
	ShouldDisplayProductTour *bool               `json:"shouldDisplayProductTour,omitempty"`
	Status                   UserLoginInfoStatus `json:"status"`
	// Account resource usage status
	UsageStatus *UsageStatus `json:"usageStatus,omitempty"`
}

func (u UserLoginInfo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserLoginInfo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UserLoginInfo) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *UserLoginInfo) GetAccountTier() AccountTier {
	if o == nil {
		return AccountTier("")
	}
	return o.AccountTier
}

func (o *UserLoginInfo) GetAPISecurity() APISecurity {
	if o == nil {
		return APISecurity("")
	}
	return o.APISecurity
}

func (o *UserLoginInfo) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UserLoginInfo) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UserLoginInfo) GetFullName() string {
	if o == nil {
		return ""
	}
	return o.FullName
}

func (o *UserLoginInfo) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UserLoginInfo) GetLastLogin() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastLogin
}

func (o *UserLoginInfo) GetPermissionsMode() *PermissionsMode {
	if o == nil {
		return nil
	}
	return o.PermissionsMode
}

func (o *UserLoginInfo) GetPricingUnitType() PricingUnitType {
	if o == nil {
		return PricingUnitType("")
	}
	return o.PricingUnitType
}

func (o *UserLoginInfo) GetRole() *Role {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *UserLoginInfo) GetServerlessSecurity() ServerlessSecurity {
	if o == nil {
		return ServerlessSecurity("")
	}
	return o.ServerlessSecurity
}

func (o *UserLoginInfo) GetShouldDisplayEula() *bool {
	if o == nil {
		return nil
	}
	return o.ShouldDisplayEula
}

func (o *UserLoginInfo) GetShouldDisplayProductTour() *bool {
	if o == nil {
		return nil
	}
	return o.ShouldDisplayProductTour
}

func (o *UserLoginInfo) GetStatus() UserLoginInfoStatus {
	if o == nil {
		return UserLoginInfoStatus("")
	}
	return o.Status
}

func (o *UserLoginInfo) GetUsageStatus() *UsageStatus {
	if o == nil {
		return nil
	}
	return o.UsageStatus
}

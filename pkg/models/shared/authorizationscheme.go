// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AuthorizationSchemeType string

const (
	AuthorizationSchemeTypeAuthorizationSchemeBasicAuth   AuthorizationSchemeType = "AuthorizationSchemeBasicAuth"
	AuthorizationSchemeTypeAuthorizationSchemeAPIToken    AuthorizationSchemeType = "AuthorizationSchemeApiToken"
	AuthorizationSchemeTypeAuthorizationSchemeBearerToken AuthorizationSchemeType = "AuthorizationSchemeBearerToken"
	AuthorizationSchemeTypeAuthorizationSchemeNone        AuthorizationSchemeType = "AuthorizationSchemeNone"
)

func (e AuthorizationSchemeType) ToPointer() *AuthorizationSchemeType {
	return &e
}

func (e *AuthorizationSchemeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AuthorizationSchemeBasicAuth":
		fallthrough
	case "AuthorizationSchemeApiToken":
		fallthrough
	case "AuthorizationSchemeBearerToken":
		fallthrough
	case "AuthorizationSchemeNone":
		*e = AuthorizationSchemeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizationSchemeType: %v", v)
	}
}

type AuthorizationScheme struct {
	AuthorizationSchemeType AuthorizationSchemeType `json:"authorizationSchemeType"`
}

func (o *AuthorizationScheme) GetAuthorizationSchemeType() AuthorizationSchemeType {
	if o == nil {
		return AuthorizationSchemeType("")
	}
	return o.AuthorizationSchemeType
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

// GetRiskAssessmentPermissionsClusterIDOwnerType - owner type
type GetRiskAssessmentPermissionsClusterIDOwnerType string

const (
	GetRiskAssessmentPermissionsClusterIDOwnerTypeServiceaccount GetRiskAssessmentPermissionsClusterIDOwnerType = "SERVICEACCOUNT"
	GetRiskAssessmentPermissionsClusterIDOwnerTypeUser           GetRiskAssessmentPermissionsClusterIDOwnerType = "USER"
	GetRiskAssessmentPermissionsClusterIDOwnerTypeGroup          GetRiskAssessmentPermissionsClusterIDOwnerType = "GROUP"
)

func (e GetRiskAssessmentPermissionsClusterIDOwnerType) ToPointer() *GetRiskAssessmentPermissionsClusterIDOwnerType {
	return &e
}

func (e *GetRiskAssessmentPermissionsClusterIDOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SERVICEACCOUNT":
		fallthrough
	case "USER":
		fallthrough
	case "GROUP":
		*e = GetRiskAssessmentPermissionsClusterIDOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRiskAssessmentPermissionsClusterIDOwnerType: %v", v)
	}
}

// GetRiskAssessmentPermissionsClusterIDPermissionRisk - the risk to filter by
type GetRiskAssessmentPermissionsClusterIDPermissionRisk string

const (
	GetRiskAssessmentPermissionsClusterIDPermissionRiskNoRisk   GetRiskAssessmentPermissionsClusterIDPermissionRisk = "NO_RISK"
	GetRiskAssessmentPermissionsClusterIDPermissionRiskMedium   GetRiskAssessmentPermissionsClusterIDPermissionRisk = "MEDIUM"
	GetRiskAssessmentPermissionsClusterIDPermissionRiskHigh     GetRiskAssessmentPermissionsClusterIDPermissionRisk = "HIGH"
	GetRiskAssessmentPermissionsClusterIDPermissionRiskApproved GetRiskAssessmentPermissionsClusterIDPermissionRisk = "APPROVED"
)

func (e GetRiskAssessmentPermissionsClusterIDPermissionRisk) ToPointer() *GetRiskAssessmentPermissionsClusterIDPermissionRisk {
	return &e
}

func (e *GetRiskAssessmentPermissionsClusterIDPermissionRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_RISK":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "APPROVED":
		*e = GetRiskAssessmentPermissionsClusterIDPermissionRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRiskAssessmentPermissionsClusterIDPermissionRisk: %v", v)
	}
}

// GetRiskAssessmentPermissionsClusterIDSortDir - sorting direction
type GetRiskAssessmentPermissionsClusterIDSortDir string

const (
	GetRiskAssessmentPermissionsClusterIDSortDirAsc  GetRiskAssessmentPermissionsClusterIDSortDir = "ASC"
	GetRiskAssessmentPermissionsClusterIDSortDirDesc GetRiskAssessmentPermissionsClusterIDSortDir = "DESC"
)

func (e GetRiskAssessmentPermissionsClusterIDSortDir) ToPointer() *GetRiskAssessmentPermissionsClusterIDSortDir {
	return &e
}

func (e *GetRiskAssessmentPermissionsClusterIDSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetRiskAssessmentPermissionsClusterIDSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRiskAssessmentPermissionsClusterIDSortDir: %v", v)
	}
}

// GetRiskAssessmentPermissionsClusterIDSortKey - sort key
type GetRiskAssessmentPermissionsClusterIDSortKey string

const (
	GetRiskAssessmentPermissionsClusterIDSortKeyOwner     GetRiskAssessmentPermissionsClusterIDSortKey = "owner"
	GetRiskAssessmentPermissionsClusterIDSortKeyOwnerType GetRiskAssessmentPermissionsClusterIDSortKey = "ownerType"
)

func (e GetRiskAssessmentPermissionsClusterIDSortKey) ToPointer() *GetRiskAssessmentPermissionsClusterIDSortKey {
	return &e
}

func (e *GetRiskAssessmentPermissionsClusterIDSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "owner":
		fallthrough
	case "ownerType":
		*e = GetRiskAssessmentPermissionsClusterIDSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRiskAssessmentPermissionsClusterIDSortKey: %v", v)
	}
}

type GetRiskAssessmentPermissionsClusterIDRequest struct {
	ClusterID string `pathParam:"style=simple,explode=false,name=clusterId"`
	// include systems default owners
	IncludeSystemOwners *bool `default:"false" queryParam:"style=form,explode=true,name=includeSystemOwners"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// the namespace name to filter by
	NamespaceName *string `queryParam:"style=form,explode=true,name=namespaceName"`
	// When true, the pagination params will be ignored
	NoPagination *bool `queryParam:"style=form,explode=true,name=noPagination"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// owner name
	Owner *string `queryParam:"style=form,explode=true,name=owner"`
	// owner type
	OwnerType *GetRiskAssessmentPermissionsClusterIDOwnerType `queryParam:"style=form,explode=true,name=ownerType"`
	// the risk to filter by
	PermissionRisk *GetRiskAssessmentPermissionsClusterIDPermissionRisk `queryParam:"style=form,explode=true,name=permissionRisk"`
	// sorting direction
	SortDir *GetRiskAssessmentPermissionsClusterIDSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey *GetRiskAssessmentPermissionsClusterIDSortKey `default:"owner" queryParam:"style=form,explode=true,name=sortKey"`
}

func (g GetRiskAssessmentPermissionsClusterIDRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRiskAssessmentPermissionsClusterIDRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetClusterID() string {
	if o == nil {
		return ""
	}
	return o.ClusterID
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetIncludeSystemOwners() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeSystemOwners
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetNamespaceName() *string {
	if o == nil {
		return nil
	}
	return o.NamespaceName
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetNoPagination() *bool {
	if o == nil {
		return nil
	}
	return o.NoPagination
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetOwnerType() *GetRiskAssessmentPermissionsClusterIDOwnerType {
	if o == nil {
		return nil
	}
	return o.OwnerType
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetPermissionRisk() *GetRiskAssessmentPermissionsClusterIDPermissionRisk {
	if o == nil {
		return nil
	}
	return o.PermissionRisk
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetSortDir() *GetRiskAssessmentPermissionsClusterIDSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetRiskAssessmentPermissionsClusterIDRequest) GetSortKey() *GetRiskAssessmentPermissionsClusterIDSortKey {
	if o == nil {
		return nil
	}
	return o.SortKey
}

type GetRiskAssessmentPermissionsClusterIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Success
	OwnerResponse *shared.OwnerResponse
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetRiskAssessmentPermissionsClusterIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRiskAssessmentPermissionsClusterIDResponse) GetOwnerResponse() *shared.OwnerResponse {
	if o == nil {
		return nil
	}
	return o.OwnerResponse
}

func (o *GetRiskAssessmentPermissionsClusterIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRiskAssessmentPermissionsClusterIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"net/http"
)

// PostMitreTechniqueFixMitreTechniqueType - MITRE technique type
type PostMitreTechniqueFixMitreTechniqueType string

const (
	PostMitreTechniqueFixMitreTechniqueTypeCompromisedImages               PostMitreTechniqueFixMitreTechniqueType = "COMPROMISED_IMAGES"
	PostMitreTechniqueFixMitreTechniqueTypeUnauthorisedRegistriesUsage     PostMitreTechniqueFixMitreTechniqueType = "UNAUTHORISED_REGISTRIES_USAGE"
	PostMitreTechniqueFixMitreTechniqueTypeSuspiciousDeployment            PostMitreTechniqueFixMitreTechniqueType = "SUSPICIOUS_DEPLOYMENT"
	PostMitreTechniqueFixMitreTechniqueTypeVulnerableApplication           PostMitreTechniqueFixMitreTechniqueType = "VULNERABLE_APPLICATION"
	PostMitreTechniqueFixMitreTechniqueTypeExposedK8SDashboard             PostMitreTechniqueFixMitreTechniqueType = "EXPOSED_K8S_DASHBOARD"
	PostMitreTechniqueFixMitreTechniqueTypeExploitPublicFacingApplication  PostMitreTechniqueFixMitreTechniqueType = "EXPLOIT_PUBLIC_FACING_APPLICATION"
	PostMitreTechniqueFixMitreTechniqueTypeContainerService                PostMitreTechniqueFixMitreTechniqueType = "CONTAINER_SERVICE"
	PostMitreTechniqueFixMitreTechniqueTypeDeployContainer                 PostMitreTechniqueFixMitreTechniqueType = "DEPLOY_CONTAINER"
	PostMitreTechniqueFixMitreTechniqueTypeSSHConnection                   PostMitreTechniqueFixMitreTechniqueType = "SSH_CONNECTION"
	PostMitreTechniqueFixMitreTechniqueTypeWriteableHostPath               PostMitreTechniqueFixMitreTechniqueType = "WRITEABLE_HOST_PATH"
	PostMitreTechniqueFixMitreTechniqueTypeCronJobs                        PostMitreTechniqueFixMitreTechniqueType = "CRON_JOBS"
	PostMitreTechniqueFixMitreTechniqueTypePrivilegedOrRootContainer       PostMitreTechniqueFixMitreTechniqueType = "PRIVILEGED_OR_ROOT_CONTAINER"
	PostMitreTechniqueFixMitreTechniqueTypePrivilegeEscalationEnabled      PostMitreTechniqueFixMitreTechniqueType = "PRIVILEGE_ESCALATION_ENABLED"
	PostMitreTechniqueFixMitreTechniqueTypeClusterAdminBinding             PostMitreTechniqueFixMitreTechniqueType = "CLUSTER_ADMIN_BINDING"
	PostMitreTechniqueFixMitreTechniqueTypeUnauthorizedClusterAdminBinding PostMitreTechniqueFixMitreTechniqueType = "UNAUTHORIZED_CLUSTER_ADMIN_BINDING"
	PostMitreTechniqueFixMitreTechniqueTypeAccessClusterResources          PostMitreTechniqueFixMitreTechniqueType = "ACCESS_CLUSTER_RESOURCES"
	PostMitreTechniqueFixMitreTechniqueTypeClearContainerLogs              PostMitreTechniqueFixMitreTechniqueType = "CLEAR_CONTAINER_LOGS"
	PostMitreTechniqueFixMitreTechniqueTypeClearK8SEvents                  PostMitreTechniqueFixMitreTechniqueType = "CLEAR_K8S_EVENTS"
	PostMitreTechniqueFixMitreTechniqueTypeListSecrets                     PostMitreTechniqueFixMitreTechniqueType = "LIST_SECRETS"
	PostMitreTechniqueFixMitreTechniqueTypeServiceAccountAccess            PostMitreTechniqueFixMitreTechniqueType = "SERVICE_ACCOUNT_ACCESS"
	PostMitreTechniqueFixMitreTechniqueTypeContainerResourceDiscovery      PostMitreTechniqueFixMitreTechniqueType = "CONTAINER_RESOURCE_DISCOVERY"
	PostMitreTechniqueFixMitreTechniqueTypeClusterInternalNetworking       PostMitreTechniqueFixMitreTechniqueType = "CLUSTER_INTERNAL_NETWORKING"
	PostMitreTechniqueFixMitreTechniqueTypeTillerEndpointAccess            PostMitreTechniqueFixMitreTechniqueType = "TILLER_ENDPOINT_ACCESS"
	PostMitreTechniqueFixMitreTechniqueTypeDataDestruction                 PostMitreTechniqueFixMitreTechniqueType = "DATA_DESTRUCTION"
)

func (e PostMitreTechniqueFixMitreTechniqueType) ToPointer() *PostMitreTechniqueFixMitreTechniqueType {
	return &e
}

func (e *PostMitreTechniqueFixMitreTechniqueType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPROMISED_IMAGES":
		fallthrough
	case "UNAUTHORISED_REGISTRIES_USAGE":
		fallthrough
	case "SUSPICIOUS_DEPLOYMENT":
		fallthrough
	case "VULNERABLE_APPLICATION":
		fallthrough
	case "EXPOSED_K8S_DASHBOARD":
		fallthrough
	case "EXPLOIT_PUBLIC_FACING_APPLICATION":
		fallthrough
	case "CONTAINER_SERVICE":
		fallthrough
	case "DEPLOY_CONTAINER":
		fallthrough
	case "SSH_CONNECTION":
		fallthrough
	case "WRITEABLE_HOST_PATH":
		fallthrough
	case "CRON_JOBS":
		fallthrough
	case "PRIVILEGED_OR_ROOT_CONTAINER":
		fallthrough
	case "PRIVILEGE_ESCALATION_ENABLED":
		fallthrough
	case "CLUSTER_ADMIN_BINDING":
		fallthrough
	case "UNAUTHORIZED_CLUSTER_ADMIN_BINDING":
		fallthrough
	case "ACCESS_CLUSTER_RESOURCES":
		fallthrough
	case "CLEAR_CONTAINER_LOGS":
		fallthrough
	case "CLEAR_K8S_EVENTS":
		fallthrough
	case "LIST_SECRETS":
		fallthrough
	case "SERVICE_ACCOUNT_ACCESS":
		fallthrough
	case "CONTAINER_RESOURCE_DISCOVERY":
		fallthrough
	case "CLUSTER_INTERNAL_NETWORKING":
		fallthrough
	case "TILLER_ENDPOINT_ACCESS":
		fallthrough
	case "DATA_DESTRUCTION":
		*e = PostMitreTechniqueFixMitreTechniqueType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostMitreTechniqueFixMitreTechniqueType: %v", v)
	}
}

type PostMitreTechniqueFixRequest struct {
	MitreTechniqueFixInfo shared.MitreTechniqueFixInfo `request:"mediaType=application/json"`
	// the clusters ids to filter by
	ClustersIds []string `queryParam:"style=form,explode=true,name=clustersIds"`
	// MITRE technique type
	MitreTechniqueType PostMitreTechniqueFixMitreTechniqueType `queryParam:"style=form,explode=true,name=mitreTechniqueType"`
}

func (o *PostMitreTechniqueFixRequest) GetMitreTechniqueFixInfo() shared.MitreTechniqueFixInfo {
	if o == nil {
		return shared.MitreTechniqueFixInfo{}
	}
	return o.MitreTechniqueFixInfo
}

func (o *PostMitreTechniqueFixRequest) GetClustersIds() []string {
	if o == nil {
		return nil
	}
	return o.ClustersIds
}

func (o *PostMitreTechniqueFixRequest) GetMitreTechniqueType() PostMitreTechniqueFixMitreTechniqueType {
	if o == nil {
		return PostMitreTechniqueFixMitreTechniqueType("")
	}
	return o.MitreTechniqueType
}

type PostMitreTechniqueFixResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PostMitreTechniqueFixResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostMitreTechniqueFixResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostMitreTechniqueFixResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

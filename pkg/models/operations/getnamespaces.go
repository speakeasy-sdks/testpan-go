// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

// GetNamespacesProtectionStatus - When true, the API will return only protected pods
type GetNamespacesProtectionStatus string

const (
	GetNamespacesProtectionStatusFull           GetNamespacesProtectionStatus = "FULL"
	GetNamespacesProtectionStatusDeploymentOnly GetNamespacesProtectionStatus = "DEPLOYMENT_ONLY"
	GetNamespacesProtectionStatusConnectionOnly GetNamespacesProtectionStatus = "CONNECTION_ONLY"
	GetNamespacesProtectionStatusDisabled       GetNamespacesProtectionStatus = "DISABLED"
	GetNamespacesProtectionStatusAll            GetNamespacesProtectionStatus = "ALL"
)

func (e GetNamespacesProtectionStatus) ToPointer() *GetNamespacesProtectionStatus {
	return &e
}

func (e *GetNamespacesProtectionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FULL":
		fallthrough
	case "DEPLOYMENT_ONLY":
		fallthrough
	case "CONNECTION_ONLY":
		fallthrough
	case "DISABLED":
		fallthrough
	case "ALL":
		*e = GetNamespacesProtectionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamespacesProtectionStatus: %v", v)
	}
}

// GetNamespacesSortDir - sorting direction
type GetNamespacesSortDir string

const (
	GetNamespacesSortDirAsc  GetNamespacesSortDir = "ASC"
	GetNamespacesSortDirDesc GetNamespacesSortDir = "DESC"
)

func (e GetNamespacesSortDir) ToPointer() *GetNamespacesSortDir {
	return &e
}

func (e *GetNamespacesSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetNamespacesSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamespacesSortDir: %v", v)
	}
}

// GetNamespacesSortKey - the namespaces sort key
type GetNamespacesSortKey string

const (
	GetNamespacesSortKeyNamespaceName    GetNamespacesSortKey = "namespaceName"
	GetNamespacesSortKeyClusterName      GetNamespacesSortKey = "clusterName"
	GetNamespacesSortKeyRunningPods      GetNamespacesSortKey = "runningPods"
	GetNamespacesSortKeyProtectionStatus GetNamespacesSortKey = "protectionStatus"
)

func (e GetNamespacesSortKey) ToPointer() *GetNamespacesSortKey {
	return &e
}

func (e *GetNamespacesSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "namespaceName":
		fallthrough
	case "clusterName":
		fallthrough
	case "runningPods":
		fallthrough
	case "protectionStatus":
		*e = GetNamespacesSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamespacesSortKey: %v", v)
	}
}

type GetNamespacesRequest struct {
	// the cluster name to filter by
	ClusterName *string `queryParam:"style=form,explode=true,name=clusterName"`
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// the namespace name to filter by
	NamespaceName *string `queryParam:"style=form,explode=true,name=namespaceName"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// When true, the API will return only protected pods
	ProtectionStatus *GetNamespacesProtectionStatus `default:"ALL" queryParam:"style=form,explode=true,name=protectionStatus"`
	// sorting direction
	SortDir *GetNamespacesSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// the namespaces sort key
	SortKey *GetNamespacesSortKey `default:"namespaceName" queryParam:"style=form,explode=true,name=sortKey"`
}

func (g GetNamespacesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetNamespacesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetNamespacesRequest) GetClusterName() *string {
	if o == nil {
		return nil
	}
	return o.ClusterName
}

func (o *GetNamespacesRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetNamespacesRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetNamespacesRequest) GetNamespaceName() *string {
	if o == nil {
		return nil
	}
	return o.NamespaceName
}

func (o *GetNamespacesRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetNamespacesRequest) GetProtectionStatus() *GetNamespacesProtectionStatus {
	if o == nil {
		return nil
	}
	return o.ProtectionStatus
}

func (o *GetNamespacesRequest) GetSortDir() *GetNamespacesSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetNamespacesRequest) GetSortKey() *GetNamespacesSortKey {
	if o == nil {
		return nil
	}
	return o.SortKey
}

type GetNamespacesResponse struct {
	// unknown error
	APIResponse *shared.APIResponse
	// HTTP response content type for this operation
	ContentType string
	// Success
	Namespaces []shared.Namespace
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetNamespacesResponse) GetAPIResponse() *shared.APIResponse {
	if o == nil {
		return nil
	}
	return o.APIResponse
}

func (o *GetNamespacesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetNamespacesResponse) GetNamespaces() []shared.Namespace {
	if o == nil {
		return nil
	}
	return o.Namespaces
}

func (o *GetNamespacesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetNamespacesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

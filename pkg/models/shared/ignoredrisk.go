// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type IgnoredRiskType string

const (
	IgnoredRiskTypeClusterIgnoredRisk        IgnoredRiskType = "ClusterIgnoredRisk"
	IgnoredRiskTypeAnyClusterIgnoredRisk     IgnoredRiskType = "AnyClusterIgnoredRisk"
	IgnoredRiskTypeAnyEnvironmentIgnoredRisk IgnoredRiskType = "AnyEnvironmentIgnoredRisk"
	IgnoredRiskTypeEnvironmentIgnoredRisk    IgnoredRiskType = "EnvironmentIgnoredRisk"
	IgnoredRiskTypeWorkloadIgnoredRisk       IgnoredRiskType = "WorkloadIgnoredRisk"
)

func (e IgnoredRiskType) ToPointer() *IgnoredRiskType {
	return &e
}

func (e *IgnoredRiskType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ClusterIgnoredRisk":
		fallthrough
	case "AnyClusterIgnoredRisk":
		fallthrough
	case "AnyEnvironmentIgnoredRisk":
		fallthrough
	case "EnvironmentIgnoredRisk":
		fallthrough
	case "WorkloadIgnoredRisk":
		*e = IgnoredRiskType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IgnoredRiskType: %v", v)
	}
}

// IgnoredRisk - represent ignore risk object
type IgnoredRisk struct {
	ID                *string                  `json:"id,omitempty"`
	IgnoredRiskType   IgnoredRiskType          `json:"ignoredRiskType"`
	WorkloadRisksType []WorkloadRiskReasonType `json:"workloadRisksType"`
}

func (o *IgnoredRisk) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IgnoredRisk) GetIgnoredRiskType() IgnoredRiskType {
	if o == nil {
		return IgnoredRiskType("")
	}
	return o.IgnoredRiskType
}

func (o *IgnoredRisk) GetWorkloadRisksType() []WorkloadRiskReasonType {
	if o == nil {
		return []WorkloadRiskReasonType{}
	}
	return o.WorkloadRisksType
}

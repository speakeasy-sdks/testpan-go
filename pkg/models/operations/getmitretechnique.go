// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"net/http"
)

// GetMitreTechniqueMitreTechniqueType - MITRE technique type
type GetMitreTechniqueMitreTechniqueType string

const (
	GetMitreTechniqueMitreTechniqueTypeCompromisedImages               GetMitreTechniqueMitreTechniqueType = "COMPROMISED_IMAGES"
	GetMitreTechniqueMitreTechniqueTypeUnauthorisedRegistriesUsage     GetMitreTechniqueMitreTechniqueType = "UNAUTHORISED_REGISTRIES_USAGE"
	GetMitreTechniqueMitreTechniqueTypeSuspiciousDeployment            GetMitreTechniqueMitreTechniqueType = "SUSPICIOUS_DEPLOYMENT"
	GetMitreTechniqueMitreTechniqueTypeVulnerableApplication           GetMitreTechniqueMitreTechniqueType = "VULNERABLE_APPLICATION"
	GetMitreTechniqueMitreTechniqueTypeExposedK8SDashboard             GetMitreTechniqueMitreTechniqueType = "EXPOSED_K8S_DASHBOARD"
	GetMitreTechniqueMitreTechniqueTypeExploitPublicFacingApplication  GetMitreTechniqueMitreTechniqueType = "EXPLOIT_PUBLIC_FACING_APPLICATION"
	GetMitreTechniqueMitreTechniqueTypeContainerService                GetMitreTechniqueMitreTechniqueType = "CONTAINER_SERVICE"
	GetMitreTechniqueMitreTechniqueTypeDeployContainer                 GetMitreTechniqueMitreTechniqueType = "DEPLOY_CONTAINER"
	GetMitreTechniqueMitreTechniqueTypeSSHConnection                   GetMitreTechniqueMitreTechniqueType = "SSH_CONNECTION"
	GetMitreTechniqueMitreTechniqueTypeWriteableHostPath               GetMitreTechniqueMitreTechniqueType = "WRITEABLE_HOST_PATH"
	GetMitreTechniqueMitreTechniqueTypeCronJobs                        GetMitreTechniqueMitreTechniqueType = "CRON_JOBS"
	GetMitreTechniqueMitreTechniqueTypePrivilegedOrRootContainer       GetMitreTechniqueMitreTechniqueType = "PRIVILEGED_OR_ROOT_CONTAINER"
	GetMitreTechniqueMitreTechniqueTypePrivilegeEscalationEnabled      GetMitreTechniqueMitreTechniqueType = "PRIVILEGE_ESCALATION_ENABLED"
	GetMitreTechniqueMitreTechniqueTypeClusterAdminBinding             GetMitreTechniqueMitreTechniqueType = "CLUSTER_ADMIN_BINDING"
	GetMitreTechniqueMitreTechniqueTypeUnauthorizedClusterAdminBinding GetMitreTechniqueMitreTechniqueType = "UNAUTHORIZED_CLUSTER_ADMIN_BINDING"
	GetMitreTechniqueMitreTechniqueTypeAccessClusterResources          GetMitreTechniqueMitreTechniqueType = "ACCESS_CLUSTER_RESOURCES"
	GetMitreTechniqueMitreTechniqueTypeClearContainerLogs              GetMitreTechniqueMitreTechniqueType = "CLEAR_CONTAINER_LOGS"
	GetMitreTechniqueMitreTechniqueTypeClearK8SEvents                  GetMitreTechniqueMitreTechniqueType = "CLEAR_K8S_EVENTS"
	GetMitreTechniqueMitreTechniqueTypeListSecrets                     GetMitreTechniqueMitreTechniqueType = "LIST_SECRETS"
	GetMitreTechniqueMitreTechniqueTypeServiceAccountAccess            GetMitreTechniqueMitreTechniqueType = "SERVICE_ACCOUNT_ACCESS"
	GetMitreTechniqueMitreTechniqueTypeContainerResourceDiscovery      GetMitreTechniqueMitreTechniqueType = "CONTAINER_RESOURCE_DISCOVERY"
	GetMitreTechniqueMitreTechniqueTypeClusterInternalNetworking       GetMitreTechniqueMitreTechniqueType = "CLUSTER_INTERNAL_NETWORKING"
	GetMitreTechniqueMitreTechniqueTypeTillerEndpointAccess            GetMitreTechniqueMitreTechniqueType = "TILLER_ENDPOINT_ACCESS"
	GetMitreTechniqueMitreTechniqueTypeDataDestruction                 GetMitreTechniqueMitreTechniqueType = "DATA_DESTRUCTION"
)

func (e GetMitreTechniqueMitreTechniqueType) ToPointer() *GetMitreTechniqueMitreTechniqueType {
	return &e
}

func (e *GetMitreTechniqueMitreTechniqueType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPROMISED_IMAGES":
		fallthrough
	case "UNAUTHORISED_REGISTRIES_USAGE":
		fallthrough
	case "SUSPICIOUS_DEPLOYMENT":
		fallthrough
	case "VULNERABLE_APPLICATION":
		fallthrough
	case "EXPOSED_K8S_DASHBOARD":
		fallthrough
	case "EXPLOIT_PUBLIC_FACING_APPLICATION":
		fallthrough
	case "CONTAINER_SERVICE":
		fallthrough
	case "DEPLOY_CONTAINER":
		fallthrough
	case "SSH_CONNECTION":
		fallthrough
	case "WRITEABLE_HOST_PATH":
		fallthrough
	case "CRON_JOBS":
		fallthrough
	case "PRIVILEGED_OR_ROOT_CONTAINER":
		fallthrough
	case "PRIVILEGE_ESCALATION_ENABLED":
		fallthrough
	case "CLUSTER_ADMIN_BINDING":
		fallthrough
	case "UNAUTHORIZED_CLUSTER_ADMIN_BINDING":
		fallthrough
	case "ACCESS_CLUSTER_RESOURCES":
		fallthrough
	case "CLEAR_CONTAINER_LOGS":
		fallthrough
	case "CLEAR_K8S_EVENTS":
		fallthrough
	case "LIST_SECRETS":
		fallthrough
	case "SERVICE_ACCOUNT_ACCESS":
		fallthrough
	case "CONTAINER_RESOURCE_DISCOVERY":
		fallthrough
	case "CLUSTER_INTERNAL_NETWORKING":
		fallthrough
	case "TILLER_ENDPOINT_ACCESS":
		fallthrough
	case "DATA_DESTRUCTION":
		*e = GetMitreTechniqueMitreTechniqueType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMitreTechniqueMitreTechniqueType: %v", v)
	}
}

type GetMitreTechniqueRequest struct {
	// the clusters ids to filter by
	ClustersIds []string `queryParam:"style=form,explode=true,name=clustersIds"`
	// MITRE technique type
	MitreTechniqueType GetMitreTechniqueMitreTechniqueType `queryParam:"style=form,explode=true,name=mitreTechniqueType"`
}

func (o *GetMitreTechniqueRequest) GetClustersIds() []string {
	if o == nil {
		return nil
	}
	return o.ClustersIds
}

func (o *GetMitreTechniqueRequest) GetMitreTechniqueType() GetMitreTechniqueMitreTechniqueType {
	if o == nil {
		return GetMitreTechniqueMitreTechniqueType("")
	}
	return o.MitreTechniqueType
}

type GetMitreTechniqueResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Success
	MitreTechniqueInfo *shared.MitreTechniqueInfo
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetMitreTechniqueResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetMitreTechniqueResponse) GetMitreTechniqueInfo() *shared.MitreTechniqueInfo {
	if o == nil {
		return nil
	}
	return o.MitreTechniqueInfo
}

func (o *GetMitreTechniqueResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetMitreTechniqueResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

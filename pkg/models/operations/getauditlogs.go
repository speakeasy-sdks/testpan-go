// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
	"time"
)

// GetAuditLogsSortDir - sorting direction
type GetAuditLogsSortDir string

const (
	GetAuditLogsSortDirAsc  GetAuditLogsSortDir = "ASC"
	GetAuditLogsSortDirDesc GetAuditLogsSortDir = "DESC"
)

func (e GetAuditLogsSortDir) ToPointer() *GetAuditLogsSortDir {
	return &e
}

func (e *GetAuditLogsSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetAuditLogsSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAuditLogsSortDir: %v", v)
	}
}

// GetAuditLogsSortKey - sort key
type GetAuditLogsSortKey string

const (
	GetAuditLogsSortKeyTime       GetAuditLogsSortKey = "time"
	GetAuditLogsSortKeyAction     GetAuditLogsSortKey = "action"
	GetAuditLogsSortKeyObjectType GetAuditLogsSortKey = "objectType"
)

func (e GetAuditLogsSortKey) ToPointer() *GetAuditLogsSortKey {
	return &e
}

func (e *GetAuditLogsSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "time":
		fallthrough
	case "action":
		fallthrough
	case "objectType":
		*e = GetAuditLogsSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAuditLogsSortKey: %v", v)
	}
}

type GetAuditLogsRequest struct {
	// Actions
	Actions []string `queryParam:"style=form,explode=false,name=actions"`
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// End date of the query
	EndTime time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// Object Type
	ObjectType *string `queryParam:"style=form,explode=true,name=objectType"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// sorting direction
	SortDir *GetAuditLogsSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey *GetAuditLogsSortKey `default:"time" queryParam:"style=form,explode=true,name=sortKey"`
	// Start date of the query
	StartTime time.Time `queryParam:"style=form,explode=true,name=startTime"`
	// User name
	User *string `queryParam:"style=form,explode=true,name=user"`
}

func (g GetAuditLogsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAuditLogsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAuditLogsRequest) GetActions() []string {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *GetAuditLogsRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetAuditLogsRequest) GetEndTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndTime
}

func (o *GetAuditLogsRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetAuditLogsRequest) GetObjectType() *string {
	if o == nil {
		return nil
	}
	return o.ObjectType
}

func (o *GetAuditLogsRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetAuditLogsRequest) GetSortDir() *GetAuditLogsSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetAuditLogsRequest) GetSortKey() *GetAuditLogsSortKey {
	if o == nil {
		return nil
	}
	return o.SortKey
}

func (o *GetAuditLogsRequest) GetStartTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartTime
}

func (o *GetAuditLogsRequest) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

type GetAuditLogsResponse struct {
	// Success
	AuditLogs []shared.AuditLog
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetAuditLogsResponse) GetAuditLogs() []shared.AuditLog {
	if o == nil {
		return nil
	}
	return o.AuditLogs
}

func (o *GetAuditLogsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAuditLogsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAuditLogsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

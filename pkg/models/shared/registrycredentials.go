// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RegistryCredentialsRegistryCredentialsType string

const (
	RegistryCredentialsRegistryCredentialsTypeAwsRegistryCredentials      RegistryCredentialsRegistryCredentialsType = "AwsRegistryCredentials"
	RegistryCredentialsRegistryCredentialsTypeStandardRegistryCredentials RegistryCredentialsRegistryCredentialsType = "StandardRegistryCredentials"
	RegistryCredentialsRegistryCredentialsTypeJfrogRegistryCredentials    RegistryCredentialsRegistryCredentialsType = "JfrogRegistryCredentials"
)

func (e RegistryCredentialsRegistryCredentialsType) ToPointer() *RegistryCredentialsRegistryCredentialsType {
	return &e
}

func (e *RegistryCredentialsRegistryCredentialsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AwsRegistryCredentials":
		fallthrough
	case "StandardRegistryCredentials":
		fallthrough
	case "JfrogRegistryCredentials":
		*e = RegistryCredentialsRegistryCredentialsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistryCredentialsRegistryCredentialsType: %v", v)
	}
}

type RegistryCredentials struct {
	RegistryCredentialsType RegistryCredentialsRegistryCredentialsType `json:"registryCredentialsType"`
}

func (o *RegistryCredentials) GetRegistryCredentialsType() RegistryCredentialsRegistryCredentialsType {
	if o == nil {
		return RegistryCredentialsRegistryCredentialsType("")
	}
	return o.RegistryCredentialsType
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

type PolicyRisk string

const (
	PolicyRiskLow      PolicyRisk = "LOW"
	PolicyRiskMedium   PolicyRisk = "MEDIUM"
	PolicyRiskHigh     PolicyRisk = "HIGH"
	PolicyRiskCritical PolicyRisk = "CRITICAL"
)

func (e PolicyRisk) ToPointer() *PolicyRisk {
	return &e
}

func (e *PolicyRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = PolicyRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyRisk: %v", v)
	}
}

type QueryParamResult string

const (
	QueryParamResultAllow  QueryParamResult = "ALLOW"
	QueryParamResultDetect QueryParamResult = "DETECT"
	QueryParamResultBlock  QueryParamResult = "BLOCK"
)

func (e QueryParamResult) ToPointer() *QueryParamResult {
	return &e
}

func (e *QueryParamResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "DETECT":
		fallthrough
	case "BLOCK":
		*e = QueryParamResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamResult: %v", v)
	}
}

type QueryParamRisk string

const (
	QueryParamRiskLow      QueryParamRisk = "LOW"
	QueryParamRiskMedium   QueryParamRisk = "MEDIUM"
	QueryParamRiskHigh     QueryParamRisk = "HIGH"
	QueryParamRiskCritical QueryParamRisk = "CRITICAL"
)

func (e QueryParamRisk) ToPointer() *QueryParamRisk {
	return &e
}

func (e *QueryParamRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = QueryParamRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamRisk: %v", v)
	}
}

type SecretsRisk string

const (
	SecretsRiskNoKnownRisk    SecretsRisk = "NO_KNOWN_RISK"
	SecretsRiskRiskIdentified SecretsRisk = "RISK_IDENTIFIED"
)

func (e SecretsRisk) ToPointer() *SecretsRisk {
	return &e
}

func (e *SecretsRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_KNOWN_RISK":
		fallthrough
	case "RISK_IDENTIFIED":
		*e = SecretsRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecretsRisk: %v", v)
	}
}

// GetServerlessFunctionsQueryParamSortDir - sorting direction
type GetServerlessFunctionsQueryParamSortDir string

const (
	GetServerlessFunctionsQueryParamSortDirAsc  GetServerlessFunctionsQueryParamSortDir = "ASC"
	GetServerlessFunctionsQueryParamSortDirDesc GetServerlessFunctionsQueryParamSortDir = "DESC"
)

func (e GetServerlessFunctionsQueryParamSortDir) ToPointer() *GetServerlessFunctionsQueryParamSortDir {
	return &e
}

func (e *GetServerlessFunctionsQueryParamSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetServerlessFunctionsQueryParamSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerlessFunctionsQueryParamSortDir: %v", v)
	}
}

type GetServerlessFunctionsRequest struct {
	// Filter cloud accounts by name
	CloudAccountName       *string  `queryParam:"style=form,explode=true,name=cloudAccountName"`
	CloudAccountsIdsFilter []string `queryParam:"style=form,explode=false,name=cloudAccountsIdsFilter"`
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// Defined function name
	FuncName []string `queryParam:"style=form,explode=false,name=funcName"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// The risk of the serverless functioriskFindingsn policy
	PolicyRisk []PolicyRisk `queryParam:"style=form,explode=false,name=policyRisk"`
	// Filter cloud accounts by region
	Region *string `queryParam:"style=form,explode=true,name=region"`
	// serverless function result filter
	Result []QueryParamResult `queryParam:"style=form,explode=false,name=result"`
	// The risk of the serverless function
	Risk []QueryParamRisk `queryParam:"style=form,explode=false,name=risk"`
	// The risk of the serverless function secrets
	SecretsRisk []SecretsRisk `queryParam:"style=form,explode=false,name=secretsRisk"`
	// sorting direction
	SortDir *GetServerlessFunctionsQueryParamSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
}

func (g GetServerlessFunctionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetServerlessFunctionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetServerlessFunctionsRequest) GetCloudAccountName() *string {
	if o == nil {
		return nil
	}
	return o.CloudAccountName
}

func (o *GetServerlessFunctionsRequest) GetCloudAccountsIdsFilter() []string {
	if o == nil {
		return nil
	}
	return o.CloudAccountsIdsFilter
}

func (o *GetServerlessFunctionsRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetServerlessFunctionsRequest) GetFuncName() []string {
	if o == nil {
		return nil
	}
	return o.FuncName
}

func (o *GetServerlessFunctionsRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetServerlessFunctionsRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetServerlessFunctionsRequest) GetPolicyRisk() []PolicyRisk {
	if o == nil {
		return nil
	}
	return o.PolicyRisk
}

func (o *GetServerlessFunctionsRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetServerlessFunctionsRequest) GetResult() []QueryParamResult {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetServerlessFunctionsRequest) GetRisk() []QueryParamRisk {
	if o == nil {
		return nil
	}
	return o.Risk
}

func (o *GetServerlessFunctionsRequest) GetSecretsRisk() []SecretsRisk {
	if o == nil {
		return nil
	}
	return o.SecretsRisk
}

func (o *GetServerlessFunctionsRequest) GetSortDir() *GetServerlessFunctionsQueryParamSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

type GetServerlessFunctionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	Classes []shared.ServerlessFunction
}

func (o *GetServerlessFunctionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetServerlessFunctionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetServerlessFunctionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetServerlessFunctionsResponse) GetClasses() []shared.ServerlessFunction {
	if o == nil {
		return nil
	}
	return o.Classes
}

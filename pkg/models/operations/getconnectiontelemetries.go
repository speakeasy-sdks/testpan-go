// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
	"time"
)

// LogicalOperator - Logical operator between the source group and the target group filters
type LogicalOperator string

const (
	LogicalOperatorAnd LogicalOperator = "and"
	LogicalOperatorOr  LogicalOperator = "or"
)

func (e LogicalOperator) ToPointer() *LogicalOperator {
	return &e
}

func (e *LogicalOperator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "and":
		fallthrough
	case "or":
		*e = LogicalOperator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogicalOperator: %v", v)
	}
}

type GetConnectionTelemetriesQueryParamResult string

const (
	GetConnectionTelemetriesQueryParamResultDetect  GetConnectionTelemetriesQueryParamResult = "DETECT"
	GetConnectionTelemetriesQueryParamResultBlock   GetConnectionTelemetriesQueryParamResult = "BLOCK"
	GetConnectionTelemetriesQueryParamResultAllow   GetConnectionTelemetriesQueryParamResult = "ALLOW"
	GetConnectionTelemetriesQueryParamResultEncrypt GetConnectionTelemetriesQueryParamResult = "ENCRYPT"
)

func (e GetConnectionTelemetriesQueryParamResult) ToPointer() *GetConnectionTelemetriesQueryParamResult {
	return &e
}

func (e *GetConnectionTelemetriesQueryParamResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DETECT":
		fallthrough
	case "BLOCK":
		fallthrough
	case "ALLOW":
		fallthrough
	case "ENCRYPT":
		*e = GetConnectionTelemetriesQueryParamResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesQueryParamResult: %v", v)
	}
}

// GetConnectionTelemetriesQueryParamSortDir - sorting direction
type GetConnectionTelemetriesQueryParamSortDir string

const (
	GetConnectionTelemetriesQueryParamSortDirAsc  GetConnectionTelemetriesQueryParamSortDir = "ASC"
	GetConnectionTelemetriesQueryParamSortDirDesc GetConnectionTelemetriesQueryParamSortDir = "DESC"
)

func (e GetConnectionTelemetriesQueryParamSortDir) ToPointer() *GetConnectionTelemetriesQueryParamSortDir {
	return &e
}

func (e *GetConnectionTelemetriesQueryParamSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetConnectionTelemetriesQueryParamSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesQueryParamSortDir: %v", v)
	}
}

// GetConnectionTelemetriesQueryParamSortKey - sort key
type GetConnectionTelemetriesQueryParamSortKey string

const (
	GetConnectionTelemetriesQueryParamSortKeySourceAppName         GetConnectionTelemetriesQueryParamSortKey = "sourceAppName"
	GetConnectionTelemetriesQueryParamSortKeySourceAppType         GetConnectionTelemetriesQueryParamSortKey = "sourceAppType"
	GetConnectionTelemetriesQueryParamSortKeySourceEnvironmentName GetConnectionTelemetriesQueryParamSortKey = "sourceEnvironmentName"
	GetConnectionTelemetriesQueryParamSortKeySourceExecutable      GetConnectionTelemetriesQueryParamSortKey = "sourceExecutable"
	GetConnectionTelemetriesQueryParamSortKeySourceRisk            GetConnectionTelemetriesQueryParamSortKey = "sourceRisk"
	GetConnectionTelemetriesQueryParamSortKeySourceHostName        GetConnectionTelemetriesQueryParamSortKey = "sourceHostName"
	GetConnectionTelemetriesQueryParamSortKeyTargetAppName         GetConnectionTelemetriesQueryParamSortKey = "targetAppName"
	GetConnectionTelemetriesQueryParamSortKeyTargetAppType         GetConnectionTelemetriesQueryParamSortKey = "targetAppType"
	GetConnectionTelemetriesQueryParamSortKeyTargetEnvironmentName GetConnectionTelemetriesQueryParamSortKey = "targetEnvironmentName"
	GetConnectionTelemetriesQueryParamSortKeyTargetExecutable      GetConnectionTelemetriesQueryParamSortKey = "targetExecutable"
	GetConnectionTelemetriesQueryParamSortKeyTargetRisk            GetConnectionTelemetriesQueryParamSortKey = "targetRisk"
	GetConnectionTelemetriesQueryParamSortKeyTargetHostName        GetConnectionTelemetriesQueryParamSortKey = "targetHostName"
	GetConnectionTelemetriesQueryParamSortKeyFirstSeen             GetConnectionTelemetriesQueryParamSortKey = "firstSeen"
	GetConnectionTelemetriesQueryParamSortKeyLastSeen              GetConnectionTelemetriesQueryParamSortKey = "lastSeen"
	GetConnectionTelemetriesQueryParamSortKeyTotal                 GetConnectionTelemetriesQueryParamSortKey = "total"
)

func (e GetConnectionTelemetriesQueryParamSortKey) ToPointer() *GetConnectionTelemetriesQueryParamSortKey {
	return &e
}

func (e *GetConnectionTelemetriesQueryParamSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sourceAppName":
		fallthrough
	case "sourceAppType":
		fallthrough
	case "sourceEnvironmentName":
		fallthrough
	case "sourceExecutable":
		fallthrough
	case "sourceRisk":
		fallthrough
	case "sourceHostName":
		fallthrough
	case "targetAppName":
		fallthrough
	case "targetAppType":
		fallthrough
	case "targetEnvironmentName":
		fallthrough
	case "targetExecutable":
		fallthrough
	case "targetRisk":
		fallthrough
	case "targetHostName":
		fallthrough
	case "firstSeen":
		fallthrough
	case "lastSeen":
		fallthrough
	case "total":
		*e = GetConnectionTelemetriesQueryParamSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConnectionTelemetriesQueryParamSortKey: %v", v)
	}
}

type SourceRisk string

const (
	SourceRiskHigh   SourceRisk = "HIGH"
	SourceRiskMedium SourceRisk = "MEDIUM"
	SourceRiskLow    SourceRisk = "LOW"
)

func (e SourceRisk) ToPointer() *SourceRisk {
	return &e
}

func (e *SourceRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = SourceRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRisk: %v", v)
	}
}

type TargetRisk string

const (
	TargetRiskHigh   TargetRisk = "HIGH"
	TargetRiskMedium TargetRisk = "MEDIUM"
	TargetRiskLow    TargetRisk = "LOW"
)

func (e TargetRisk) ToPointer() *TargetRisk {
	return &e
}

func (e *TargetRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = TargetRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetRisk: %v", v)
	}
}

type GetConnectionTelemetriesRequest struct {
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// End date of the query
	EndTime time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// Logical operator between the source group and the target group filters
	LogicalOperator *LogicalOperator `default:"and" queryParam:"style=form,explode=true,name=logicalOperator"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// connection result filter
	Result []GetConnectionTelemetriesQueryParamResult `queryParam:"style=form,explode=false,name=result"`
	// When true, the API will only return entries that violate the active policy
	ShowOnlyViolations *bool `queryParam:"style=form,explode=true,name=showOnlyViolations"`
	// sorting direction
	SortDir *GetConnectionTelemetriesQueryParamSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey               GetConnectionTelemetriesQueryParamSortKey `queryParam:"style=form,explode=true,name=sortKey"`
	SourceAppName         []string                                  `queryParam:"style=form,explode=false,name=sourceAppName"`
	SourceEnvironmentName []string                                  `queryParam:"style=form,explode=false,name=sourceEnvironmentName"`
	SourceExecutable      []string                                  `queryParam:"style=form,explode=false,name=sourceExecutable"`
	SourceHostName        []string                                  `queryParam:"style=form,explode=false,name=sourceHostName"`
	// namespace filter for source in connection telemetries, a base 64 representation of a NamespacesFilter definition object
	SourceNamespacesFilter *string      `queryParam:"style=form,explode=true,name=sourceNamespacesFilter"`
	SourceRisk             []SourceRisk `queryParam:"style=form,explode=false,name=sourceRisk"`
	// Start date of the query
	StartTime             time.Time `queryParam:"style=form,explode=true,name=startTime"`
	TargetAppName         []string  `queryParam:"style=form,explode=false,name=targetAppName"`
	TargetEnvironmentName []string  `queryParam:"style=form,explode=false,name=targetEnvironmentName"`
	TargetExecutable      []string  `queryParam:"style=form,explode=false,name=targetExecutable"`
	TargetHostName        []string  `queryParam:"style=form,explode=false,name=targetHostName"`
	// namespace filter for target in connection telemetries. a base 64 representation of a NamespacesFilter definition object
	TargetNamespacesFilter *string      `queryParam:"style=form,explode=true,name=targetNamespacesFilter"`
	TargetRisk             []TargetRisk `queryParam:"style=form,explode=false,name=targetRisk"`
}

func (g GetConnectionTelemetriesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetConnectionTelemetriesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetConnectionTelemetriesRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetConnectionTelemetriesRequest) GetEndTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndTime
}

func (o *GetConnectionTelemetriesRequest) GetLogicalOperator() *LogicalOperator {
	if o == nil {
		return nil
	}
	return o.LogicalOperator
}

func (o *GetConnectionTelemetriesRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetConnectionTelemetriesRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetConnectionTelemetriesRequest) GetResult() []GetConnectionTelemetriesQueryParamResult {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetConnectionTelemetriesRequest) GetShowOnlyViolations() *bool {
	if o == nil {
		return nil
	}
	return o.ShowOnlyViolations
}

func (o *GetConnectionTelemetriesRequest) GetSortDir() *GetConnectionTelemetriesQueryParamSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetConnectionTelemetriesRequest) GetSortKey() GetConnectionTelemetriesQueryParamSortKey {
	if o == nil {
		return GetConnectionTelemetriesQueryParamSortKey("")
	}
	return o.SortKey
}

func (o *GetConnectionTelemetriesRequest) GetSourceAppName() []string {
	if o == nil {
		return nil
	}
	return o.SourceAppName
}

func (o *GetConnectionTelemetriesRequest) GetSourceEnvironmentName() []string {
	if o == nil {
		return nil
	}
	return o.SourceEnvironmentName
}

func (o *GetConnectionTelemetriesRequest) GetSourceExecutable() []string {
	if o == nil {
		return nil
	}
	return o.SourceExecutable
}

func (o *GetConnectionTelemetriesRequest) GetSourceHostName() []string {
	if o == nil {
		return nil
	}
	return o.SourceHostName
}

func (o *GetConnectionTelemetriesRequest) GetSourceNamespacesFilter() *string {
	if o == nil {
		return nil
	}
	return o.SourceNamespacesFilter
}

func (o *GetConnectionTelemetriesRequest) GetSourceRisk() []SourceRisk {
	if o == nil {
		return nil
	}
	return o.SourceRisk
}

func (o *GetConnectionTelemetriesRequest) GetStartTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartTime
}

func (o *GetConnectionTelemetriesRequest) GetTargetAppName() []string {
	if o == nil {
		return nil
	}
	return o.TargetAppName
}

func (o *GetConnectionTelemetriesRequest) GetTargetEnvironmentName() []string {
	if o == nil {
		return nil
	}
	return o.TargetEnvironmentName
}

func (o *GetConnectionTelemetriesRequest) GetTargetExecutable() []string {
	if o == nil {
		return nil
	}
	return o.TargetExecutable
}

func (o *GetConnectionTelemetriesRequest) GetTargetHostName() []string {
	if o == nil {
		return nil
	}
	return o.TargetHostName
}

func (o *GetConnectionTelemetriesRequest) GetTargetNamespacesFilter() *string {
	if o == nil {
		return nil
	}
	return o.TargetNamespacesFilter
}

func (o *GetConnectionTelemetriesRequest) GetTargetRisk() []TargetRisk {
	if o == nil {
		return nil
	}
	return o.TargetRisk
}

type GetConnectionTelemetriesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	Classes []shared.ConnectionTelemetry
}

func (o *GetConnectionTelemetriesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetConnectionTelemetriesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetConnectionTelemetriesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetConnectionTelemetriesResponse) GetClasses() []shared.ConnectionTelemetry {
	if o == nil {
		return nil
	}
	return o.Classes
}

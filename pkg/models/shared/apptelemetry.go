// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
)

type AppTelemetryCluster struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *AppTelemetryCluster) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AppTelemetryCluster) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type AppTelemetryEnvironment struct {
	Name *string `json:"name,omitempty"`
}

func (o *AppTelemetryEnvironment) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type AppTelemetryInstance struct {
	AgentID        *string `json:"agentId,omitempty"`
	CloudAccountID *string `json:"cloudAccountId,omitempty"`
	ID             *string `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	Region         *string `json:"region,omitempty"`
}

func (o *AppTelemetryInstance) GetAgentID() *string {
	if o == nil {
		return nil
	}
	return o.AgentID
}

func (o *AppTelemetryInstance) GetCloudAccountID() *string {
	if o == nil {
		return nil
	}
	return o.CloudAccountID
}

func (o *AppTelemetryInstance) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AppTelemetryInstance) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AppTelemetryInstance) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

type AppTelemetryNamespace struct {
	ID     *string  `json:"id,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Name   *string  `json:"name,omitempty"`
}

func (o *AppTelemetryNamespace) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AppTelemetryNamespace) GetLabels() []string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *AppTelemetryNamespace) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type AppTelemetryNetwork struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *AppTelemetryNetwork) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AppTelemetryNetwork) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// AppTelemetry - Single telemetry entry
type AppTelemetry struct {
	// app info and process info for connection and App telemetries
	App *AppProcessInfo `json:"app,omitempty"`
	// runtime info of the App (if it is an App)
	AppRuntimeInfo              *AppRuntimeInfo          `json:"appRuntimeInfo,omitempty"`
	Cluster                     *AppTelemetryCluster     `json:"cluster,omitempty"`
	Environment                 *AppTelemetryEnvironment `json:"environment,omitempty"`
	Expansion                   *ExpansionTelemetryInfo  `json:"expansion,omitempty"`
	HighestDockerfileScanResult *DockerfileScanSeverity  `json:"highestDockerfileScanResult,omitempty"`
	HighestSecurityContextRisk  *WorkloadRiskLevel       `json:"highestSecurityContextRisk,omitempty"`
	HighestVulnerability        *VulnerabilitySeverity   `json:"highestVulnerability,omitempty"`
	ID                          *string                  `json:"id,omitempty"`
	Instance                    *AppTelemetryInstance    `json:"instance,omitempty"`
	IsPodProtected              *bool                    `default:"false" json:"isPodProtected"`
	IsPublicFacing              *bool                    `json:"isPublicFacing,omitempty"`
	Namespace                   *AppTelemetryNamespace   `json:"namespace,omitempty"`
	Network                     *AppTelemetryNetwork     `json:"network,omitempty"`
	Pod                         *PodTelemetryInfo        `json:"pod,omitempty"`
	PodIdentification           *PodIdentification       `json:"podIdentification,omitempty"`
	// runtime info of the pod (if is a pod)
	PodRuntimeInfo *PodRuntimeInfo `json:"podRuntimeInfo,omitempty"`
	// pod spec attributes which are potentially risky
	PodSpecInfo *PodSpecInfo `json:"podSpecInfo,omitempty"`
	// Licenses in use by the docker images. this field will be populated only in the drill down api
	PodsLicenses []string      `json:"podsLicenses,omitempty"`
	Risk         *WorkloadRisk `json:"risk,omitempty"`
	SecurecnID   *string       `json:"securecnId,omitempty"`
	// Status of a telemetry entry
	State *TelemetryState `json:"state,omitempty"`
	// the kubernetes uid
	TelemetryUID         *string                `json:"telemetryUid,omitempty"`
	TelemetryUids        []string               `json:"telemetryUids,omitempty"`
	TokenInjectionStatus *TokenInjectionStatus  `json:"tokenInjectionStatus,omitempty"`
	UnprotectedReasons   []UnprotectedPodReason `json:"unprotectedReasons,omitempty"`
	// If the the App is running on an environment on which it is not allowed to run, this object contains the rule it violated.
	Violation    *ViolationInfo `json:"violation,omitempty"`
	WorkloadType *WorkloadType  `json:"workloadType,omitempty"`
}

func (a AppTelemetry) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppTelemetry) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AppTelemetry) GetApp() *AppProcessInfo {
	if o == nil {
		return nil
	}
	return o.App
}

func (o *AppTelemetry) GetAppRuntimeInfo() *AppRuntimeInfo {
	if o == nil {
		return nil
	}
	return o.AppRuntimeInfo
}

func (o *AppTelemetry) GetCluster() *AppTelemetryCluster {
	if o == nil {
		return nil
	}
	return o.Cluster
}

func (o *AppTelemetry) GetEnvironment() *AppTelemetryEnvironment {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *AppTelemetry) GetExpansion() *ExpansionTelemetryInfo {
	if o == nil {
		return nil
	}
	return o.Expansion
}

func (o *AppTelemetry) GetHighestDockerfileScanResult() *DockerfileScanSeverity {
	if o == nil {
		return nil
	}
	return o.HighestDockerfileScanResult
}

func (o *AppTelemetry) GetHighestSecurityContextRisk() *WorkloadRiskLevel {
	if o == nil {
		return nil
	}
	return o.HighestSecurityContextRisk
}

func (o *AppTelemetry) GetHighestVulnerability() *VulnerabilitySeverity {
	if o == nil {
		return nil
	}
	return o.HighestVulnerability
}

func (o *AppTelemetry) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AppTelemetry) GetInstance() *AppTelemetryInstance {
	if o == nil {
		return nil
	}
	return o.Instance
}

func (o *AppTelemetry) GetIsPodProtected() *bool {
	if o == nil {
		return nil
	}
	return o.IsPodProtected
}

func (o *AppTelemetry) GetIsPublicFacing() *bool {
	if o == nil {
		return nil
	}
	return o.IsPublicFacing
}

func (o *AppTelemetry) GetNamespace() *AppTelemetryNamespace {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *AppTelemetry) GetNetwork() *AppTelemetryNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

func (o *AppTelemetry) GetPod() *PodTelemetryInfo {
	if o == nil {
		return nil
	}
	return o.Pod
}

func (o *AppTelemetry) GetPodIdentification() *PodIdentification {
	if o == nil {
		return nil
	}
	return o.PodIdentification
}

func (o *AppTelemetry) GetPodRuntimeInfo() *PodRuntimeInfo {
	if o == nil {
		return nil
	}
	return o.PodRuntimeInfo
}

func (o *AppTelemetry) GetPodSpecInfo() *PodSpecInfo {
	if o == nil {
		return nil
	}
	return o.PodSpecInfo
}

func (o *AppTelemetry) GetPodsLicenses() []string {
	if o == nil {
		return nil
	}
	return o.PodsLicenses
}

func (o *AppTelemetry) GetRisk() *WorkloadRisk {
	if o == nil {
		return nil
	}
	return o.Risk
}

func (o *AppTelemetry) GetSecurecnID() *string {
	if o == nil {
		return nil
	}
	return o.SecurecnID
}

func (o *AppTelemetry) GetState() *TelemetryState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *AppTelemetry) GetTelemetryUID() *string {
	if o == nil {
		return nil
	}
	return o.TelemetryUID
}

func (o *AppTelemetry) GetTelemetryUids() []string {
	if o == nil {
		return nil
	}
	return o.TelemetryUids
}

func (o *AppTelemetry) GetTokenInjectionStatus() *TokenInjectionStatus {
	if o == nil {
		return nil
	}
	return o.TokenInjectionStatus
}

func (o *AppTelemetry) GetUnprotectedReasons() []UnprotectedPodReason {
	if o == nil {
		return nil
	}
	return o.UnprotectedReasons
}

func (o *AppTelemetry) GetViolation() *ViolationInfo {
	if o == nil {
		return nil
	}
	return o.Violation
}

func (o *AppTelemetry) GetWorkloadType() *WorkloadType {
	if o == nil {
		return nil
	}
	return o.WorkloadType
}

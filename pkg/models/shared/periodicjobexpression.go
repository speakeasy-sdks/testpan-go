// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PeriodicJobType string

const (
	PeriodicJobTypeNonPeriodicJobExpression     PeriodicJobType = "NonPeriodicJobExpression"
	PeriodicJobTypeSinglePeriodicJobExpression  PeriodicJobType = "SinglePeriodicJobExpression"
	PeriodicJobTypeByHoursPeriodicJobExpression PeriodicJobType = "ByHoursPeriodicJobExpression"
	PeriodicJobTypeByDaysPeriodicJobExpression  PeriodicJobType = "ByDaysPeriodicJobExpression"
	PeriodicJobTypeWeeklyPeriodicJobExpression  PeriodicJobType = "WeeklyPeriodicJobExpression"
)

func (e PeriodicJobType) ToPointer() *PeriodicJobType {
	return &e
}

func (e *PeriodicJobType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NonPeriodicJobExpression":
		fallthrough
	case "SinglePeriodicJobExpression":
		fallthrough
	case "ByHoursPeriodicJobExpression":
		fallthrough
	case "ByDaysPeriodicJobExpression":
		fallthrough
	case "WeeklyPeriodicJobExpression":
		*e = PeriodicJobType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PeriodicJobType: %v", v)
	}
}

type PeriodicJobExpression struct {
	PeriodicJobType PeriodicJobType `json:"PeriodicJobType"`
}

func (o *PeriodicJobExpression) GetPeriodicJobType() PeriodicJobType {
	if o == nil {
		return PeriodicJobType("")
	}
	return o.PeriodicJobType
}

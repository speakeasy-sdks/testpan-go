// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/sdkerrors"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

// ProtectionStatus - When true, the API will return only protected pods
type ProtectionStatus string

const (
	ProtectionStatusFull           ProtectionStatus = "FULL"
	ProtectionStatusDeploymentOnly ProtectionStatus = "DEPLOYMENT_ONLY"
	ProtectionStatusConnectionOnly ProtectionStatus = "CONNECTION_ONLY"
	ProtectionStatusDisabled       ProtectionStatus = "DISABLED"
	ProtectionStatusAll            ProtectionStatus = "ALL"
)

func (e ProtectionStatus) ToPointer() *ProtectionStatus {
	return &e
}

func (e *ProtectionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FULL":
		fallthrough
	case "DEPLOYMENT_ONLY":
		fallthrough
	case "CONNECTION_ONLY":
		fallthrough
	case "DISABLED":
		fallthrough
	case "ALL":
		*e = ProtectionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProtectionStatus: %v", v)
	}
}

// GetNamespacesQueryParamSortDir - sorting direction
type GetNamespacesQueryParamSortDir string

const (
	GetNamespacesQueryParamSortDirAsc  GetNamespacesQueryParamSortDir = "ASC"
	GetNamespacesQueryParamSortDirDesc GetNamespacesQueryParamSortDir = "DESC"
)

func (e GetNamespacesQueryParamSortDir) ToPointer() *GetNamespacesQueryParamSortDir {
	return &e
}

func (e *GetNamespacesQueryParamSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetNamespacesQueryParamSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamespacesQueryParamSortDir: %v", v)
	}
}

// GetNamespacesQueryParamSortKey - the namespaces sort key
type GetNamespacesQueryParamSortKey string

const (
	GetNamespacesQueryParamSortKeyNamespaceName    GetNamespacesQueryParamSortKey = "namespaceName"
	GetNamespacesQueryParamSortKeyClusterName      GetNamespacesQueryParamSortKey = "clusterName"
	GetNamespacesQueryParamSortKeyRunningPods      GetNamespacesQueryParamSortKey = "runningPods"
	GetNamespacesQueryParamSortKeyProtectionStatus GetNamespacesQueryParamSortKey = "protectionStatus"
)

func (e GetNamespacesQueryParamSortKey) ToPointer() *GetNamespacesQueryParamSortKey {
	return &e
}

func (e *GetNamespacesQueryParamSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "namespaceName":
		fallthrough
	case "clusterName":
		fallthrough
	case "runningPods":
		fallthrough
	case "protectionStatus":
		*e = GetNamespacesQueryParamSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamespacesQueryParamSortKey: %v", v)
	}
}

type GetNamespacesRequest struct {
	// the cluster name to filter by
	ClusterName *string `queryParam:"style=form,explode=true,name=clusterName"`
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// the namespace name to filter by
	NamespaceName *string `queryParam:"style=form,explode=true,name=namespaceName"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// When true, the API will return only protected pods
	ProtectionStatus *ProtectionStatus `default:"ALL" queryParam:"style=form,explode=true,name=protectionStatus"`
	// sorting direction
	SortDir *GetNamespacesQueryParamSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// the namespaces sort key
	SortKey *GetNamespacesQueryParamSortKey `default:"namespaceName" queryParam:"style=form,explode=true,name=sortKey"`
}

func (g GetNamespacesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetNamespacesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetNamespacesRequest) GetClusterName() *string {
	if o == nil {
		return nil
	}
	return o.ClusterName
}

func (o *GetNamespacesRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetNamespacesRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetNamespacesRequest) GetNamespaceName() *string {
	if o == nil {
		return nil
	}
	return o.NamespaceName
}

func (o *GetNamespacesRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetNamespacesRequest) GetProtectionStatus() *ProtectionStatus {
	if o == nil {
		return nil
	}
	return o.ProtectionStatus
}

func (o *GetNamespacesRequest) GetSortDir() *GetNamespacesQueryParamSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetNamespacesRequest) GetSortKey() *GetNamespacesQueryParamSortKey {
	if o == nil {
		return nil
	}
	return o.SortKey
}

type GetNamespacesResponse struct {
	// unknown error
	APIResponse *sdkerrors.APIResponse
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	Classes []shared.Namespace
}

func (o *GetNamespacesResponse) GetAPIResponse() *sdkerrors.APIResponse {
	if o == nil {
		return nil
	}
	return o.APIResponse
}

func (o *GetNamespacesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetNamespacesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetNamespacesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetNamespacesResponse) GetClasses() []shared.Namespace {
	if o == nil {
		return nil
	}
	return o.Classes
}

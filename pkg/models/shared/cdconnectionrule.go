// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Status string

const (
	StatusEnabled  Status = "ENABLED"
	StatusDisabled Status = "DISABLED"
	StatusDeleted  Status = "DELETED"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "DELETED":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// CdConnectionRule - A rule that states what apps are allowed to communicate with each other.
type CdConnectionRule struct {
	// ENCRYPT is not allowed in default rule
	Action      *ConnectionRuleAction `json:"action,omitempty"`
	Destination *ConnectionRulePart   `json:"destination,omitempty"`
	GroupName   *string               `json:"groupName,omitempty"`
	ID          *string               `json:"id,omitempty"`
	Name        *string               `json:"name,omitempty"`
	Source      *ConnectionRulePart   `json:"source,omitempty"`
	Status      *Status               `json:"status,omitempty"`
}

func (o *CdConnectionRule) GetAction() *ConnectionRuleAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CdConnectionRule) GetDestination() *ConnectionRulePart {
	if o == nil {
		return nil
	}
	return o.Destination
}

func (o *CdConnectionRule) GetGroupName() *string {
	if o == nil {
		return nil
	}
	return o.GroupName
}

func (o *CdConnectionRule) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CdConnectionRule) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CdConnectionRule) GetSource() *ConnectionRulePart {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CdConnectionRule) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

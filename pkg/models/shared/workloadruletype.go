// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WorkloadRuleTypeWorkloadRuleType string

const (
	WorkloadRuleTypeWorkloadRuleTypeAppNameWorkloadRuleType  WorkloadRuleTypeWorkloadRuleType = "AppNameWorkloadRuleType"
	WorkloadRuleTypeWorkloadRuleTypeAppTypeWorkloadRuleType  WorkloadRuleTypeWorkloadRuleType = "AppTypeWorkloadRuleType"
	WorkloadRuleTypeWorkloadRuleTypeAppLabelWorkloadRuleType WorkloadRuleTypeWorkloadRuleType = "AppLabelWorkloadRuleType"
	WorkloadRuleTypeWorkloadRuleTypeAppAnyWorkloadRuleType   WorkloadRuleTypeWorkloadRuleType = "AppAnyWorkloadRuleType"
	WorkloadRuleTypeWorkloadRuleTypePodNameWorkloadRuleType  WorkloadRuleTypeWorkloadRuleType = "PodNameWorkloadRuleType"
	WorkloadRuleTypeWorkloadRuleTypePodLabelWorkloadRuleType WorkloadRuleTypeWorkloadRuleType = "PodLabelWorkloadRuleType"
	WorkloadRuleTypeWorkloadRuleTypePodAnyWorkloadRuleType   WorkloadRuleTypeWorkloadRuleType = "PodAnyWorkloadRuleType"
)

func (e WorkloadRuleTypeWorkloadRuleType) ToPointer() *WorkloadRuleTypeWorkloadRuleType {
	return &e
}

func (e *WorkloadRuleTypeWorkloadRuleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AppNameWorkloadRuleType":
		fallthrough
	case "AppTypeWorkloadRuleType":
		fallthrough
	case "AppLabelWorkloadRuleType":
		fallthrough
	case "AppAnyWorkloadRuleType":
		fallthrough
	case "PodNameWorkloadRuleType":
		fallthrough
	case "PodLabelWorkloadRuleType":
		fallthrough
	case "PodAnyWorkloadRuleType":
		*e = WorkloadRuleTypeWorkloadRuleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WorkloadRuleTypeWorkloadRuleType: %v", v)
	}
}

// WorkloadRuleType - identify the workload type. Only one of the below should be not null, and  used.
type WorkloadRuleType struct {
	WorkloadRuleType WorkloadRuleTypeWorkloadRuleType `json:"workloadRuleType"`
}

func (o *WorkloadRuleType) GetWorkloadRuleType() WorkloadRuleTypeWorkloadRuleType {
	if o == nil {
		return WorkloadRuleTypeWorkloadRuleType("")
	}
	return o.WorkloadRuleType
}

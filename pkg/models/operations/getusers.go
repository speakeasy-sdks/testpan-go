// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"net/http"
)

type GetUsersRoles string

const (
	GetUsersRolesLightspinAdmin   GetUsersRoles = "LIGHTSPIN_ADMIN"
	GetUsersRolesSelfProvisioning GetUsersRoles = "SELF_PROVISIONING"
	GetUsersRolesCiCdScanner      GetUsersRoles = "CI_CD_SCANNER"
	GetUsersRolesPortshiftAdmin   GetUsersRoles = "PORTSHIFT_ADMIN"
	GetUsersRolesPortshiftAuditor GetUsersRoles = "PORTSHIFT_AUDITOR"
	GetUsersRolesAccountAdmin     GetUsersRoles = "ACCOUNT_ADMIN"
	GetUsersRolesService          GetUsersRoles = "SERVICE"
	GetUsersRolesAccountAuditor   GetUsersRoles = "ACCOUNT_AUDITOR"
)

func (e GetUsersRoles) ToPointer() *GetUsersRoles {
	return &e
}

func (e *GetUsersRoles) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIGHTSPIN_ADMIN":
		fallthrough
	case "SELF_PROVISIONING":
		fallthrough
	case "CI_CD_SCANNER":
		fallthrough
	case "PORTSHIFT_ADMIN":
		fallthrough
	case "PORTSHIFT_AUDITOR":
		fallthrough
	case "ACCOUNT_ADMIN":
		fallthrough
	case "SERVICE":
		fallthrough
	case "ACCOUNT_AUDITOR":
		*e = GetUsersRoles(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersRoles: %v", v)
	}
}

type GetUsersRequest struct {
	// the email to filter by
	Email *string `queryParam:"style=form,explode=true,name=email"`
	// the roles to filter by
	Roles []GetUsersRoles `queryParam:"style=form,explode=true,name=roles"`
	// the user name to filter by
	Username *string `queryParam:"style=form,explode=true,name=username"`
}

func (o *GetUsersRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetUsersRequest) GetRoles() []GetUsersRoles {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *GetUsersRequest) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type GetUsersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	UserDisplays []shared.UserDisplay
}

func (o *GetUsersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetUsersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetUsersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetUsersResponse) GetUserDisplays() []shared.UserDisplay {
	if o == nil {
		return nil
	}
	return o.UserDisplays
}

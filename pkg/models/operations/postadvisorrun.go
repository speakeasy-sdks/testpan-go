// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PolicyAdvisorType - policy advisor type
type PolicyAdvisorType string

const (
	PolicyAdvisorTypeEnvironment         PolicyAdvisorType = "ENVIRONMENT"
	PolicyAdvisorTypePodSecurityStandard PolicyAdvisorType = "POD_SECURITY_STANDARD"
	PolicyAdvisorTypeConnectionRules     PolicyAdvisorType = "CONNECTION_RULES"
	PolicyAdvisorTypeDeploymentRules     PolicyAdvisorType = "DEPLOYMENT_RULES"
	PolicyAdvisorTypeAPIRules            PolicyAdvisorType = "API_RULES"
)

func (e PolicyAdvisorType) ToPointer() *PolicyAdvisorType {
	return &e
}

func (e *PolicyAdvisorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENVIRONMENT":
		fallthrough
	case "POD_SECURITY_STANDARD":
		fallthrough
	case "CONNECTION_RULES":
		fallthrough
	case "DEPLOYMENT_RULES":
		fallthrough
	case "API_RULES":
		*e = PolicyAdvisorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyAdvisorType: %v", v)
	}
}

type PostAdvisorRunRequest struct {
	// policy advisor type
	PolicyAdvisorType PolicyAdvisorType `queryParam:"style=form,explode=true,name=policyAdvisorType"`
}

func (o *PostAdvisorRunRequest) GetPolicyAdvisorType() PolicyAdvisorType {
	if o == nil {
		return PolicyAdvisorType("")
	}
	return o.PolicyAdvisorType
}

type PostAdvisorRunResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PostAdvisorRunResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostAdvisorRunResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostAdvisorRunResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

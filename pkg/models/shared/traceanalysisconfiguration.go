// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TraceAnalysisConfigurationTimeUnit string

const (
	TraceAnalysisConfigurationTimeUnitMinutes TraceAnalysisConfigurationTimeUnit = "MINUTES"
	TraceAnalysisConfigurationTimeUnitHours   TraceAnalysisConfigurationTimeUnit = "HOURS"
	TraceAnalysisConfigurationTimeUnitDays    TraceAnalysisConfigurationTimeUnit = "DAYS"
)

func (e TraceAnalysisConfigurationTimeUnit) ToPointer() *TraceAnalysisConfigurationTimeUnit {
	return &e
}

func (e *TraceAnalysisConfigurationTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MINUTES":
		fallthrough
	case "HOURS":
		fallthrough
	case "DAYS":
		*e = TraceAnalysisConfigurationTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TraceAnalysisConfigurationTimeUnit: %v", v)
	}
}

type TraceAnalysisConfiguration struct {
	Duration int64                              `json:"duration"`
	TimeUnit TraceAnalysisConfigurationTimeUnit `json:"timeUnit"`
}

func (o *TraceAnalysisConfiguration) GetDuration() int64 {
	if o == nil {
		return 0
	}
	return o.Duration
}

func (o *TraceAnalysisConfiguration) GetTimeUnit() TraceAnalysisConfigurationTimeUnit {
	if o == nil {
		return TraceAnalysisConfigurationTimeUnit("")
	}
	return o.TimeUnit
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

type GetServerlessFunctionsPolicyRisk string

const (
	GetServerlessFunctionsPolicyRiskLow      GetServerlessFunctionsPolicyRisk = "LOW"
	GetServerlessFunctionsPolicyRiskMedium   GetServerlessFunctionsPolicyRisk = "MEDIUM"
	GetServerlessFunctionsPolicyRiskHigh     GetServerlessFunctionsPolicyRisk = "HIGH"
	GetServerlessFunctionsPolicyRiskCritical GetServerlessFunctionsPolicyRisk = "CRITICAL"
)

func (e GetServerlessFunctionsPolicyRisk) ToPointer() *GetServerlessFunctionsPolicyRisk {
	return &e
}

func (e *GetServerlessFunctionsPolicyRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = GetServerlessFunctionsPolicyRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerlessFunctionsPolicyRisk: %v", v)
	}
}

type GetServerlessFunctionsResult string

const (
	GetServerlessFunctionsResultAllow  GetServerlessFunctionsResult = "ALLOW"
	GetServerlessFunctionsResultDetect GetServerlessFunctionsResult = "DETECT"
	GetServerlessFunctionsResultBlock  GetServerlessFunctionsResult = "BLOCK"
)

func (e GetServerlessFunctionsResult) ToPointer() *GetServerlessFunctionsResult {
	return &e
}

func (e *GetServerlessFunctionsResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "DETECT":
		fallthrough
	case "BLOCK":
		*e = GetServerlessFunctionsResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerlessFunctionsResult: %v", v)
	}
}

type GetServerlessFunctionsRisk string

const (
	GetServerlessFunctionsRiskLow      GetServerlessFunctionsRisk = "LOW"
	GetServerlessFunctionsRiskMedium   GetServerlessFunctionsRisk = "MEDIUM"
	GetServerlessFunctionsRiskHigh     GetServerlessFunctionsRisk = "HIGH"
	GetServerlessFunctionsRiskCritical GetServerlessFunctionsRisk = "CRITICAL"
)

func (e GetServerlessFunctionsRisk) ToPointer() *GetServerlessFunctionsRisk {
	return &e
}

func (e *GetServerlessFunctionsRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = GetServerlessFunctionsRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerlessFunctionsRisk: %v", v)
	}
}

type GetServerlessFunctionsSecretsRisk string

const (
	GetServerlessFunctionsSecretsRiskNoKnownRisk    GetServerlessFunctionsSecretsRisk = "NO_KNOWN_RISK"
	GetServerlessFunctionsSecretsRiskRiskIdentified GetServerlessFunctionsSecretsRisk = "RISK_IDENTIFIED"
)

func (e GetServerlessFunctionsSecretsRisk) ToPointer() *GetServerlessFunctionsSecretsRisk {
	return &e
}

func (e *GetServerlessFunctionsSecretsRisk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_KNOWN_RISK":
		fallthrough
	case "RISK_IDENTIFIED":
		*e = GetServerlessFunctionsSecretsRisk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerlessFunctionsSecretsRisk: %v", v)
	}
}

// GetServerlessFunctionsSortDir - sorting direction
type GetServerlessFunctionsSortDir string

const (
	GetServerlessFunctionsSortDirAsc  GetServerlessFunctionsSortDir = "ASC"
	GetServerlessFunctionsSortDirDesc GetServerlessFunctionsSortDir = "DESC"
)

func (e GetServerlessFunctionsSortDir) ToPointer() *GetServerlessFunctionsSortDir {
	return &e
}

func (e *GetServerlessFunctionsSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetServerlessFunctionsSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerlessFunctionsSortDir: %v", v)
	}
}

type GetServerlessFunctionsRequest struct {
	// Filter cloud accounts by name
	CloudAccountName       *string  `queryParam:"style=form,explode=true,name=cloudAccountName"`
	CloudAccountsIdsFilter []string `queryParam:"style=form,explode=false,name=cloudAccountsIdsFilter"`
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// Defined function name
	FuncName []string `queryParam:"style=form,explode=false,name=funcName"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// The risk of the serverless functioriskFindingsn policy
	PolicyRisk []GetServerlessFunctionsPolicyRisk `queryParam:"style=form,explode=false,name=policyRisk"`
	// Filter cloud accounts by region
	Region *string `queryParam:"style=form,explode=true,name=region"`
	// serverless function result filter
	Result []GetServerlessFunctionsResult `queryParam:"style=form,explode=false,name=result"`
	// The risk of the serverless function
	Risk []GetServerlessFunctionsRisk `queryParam:"style=form,explode=false,name=risk"`
	// The risk of the serverless function secrets
	SecretsRisk []GetServerlessFunctionsSecretsRisk `queryParam:"style=form,explode=false,name=secretsRisk"`
	// sorting direction
	SortDir *GetServerlessFunctionsSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
}

func (g GetServerlessFunctionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetServerlessFunctionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetServerlessFunctionsRequest) GetCloudAccountName() *string {
	if o == nil {
		return nil
	}
	return o.CloudAccountName
}

func (o *GetServerlessFunctionsRequest) GetCloudAccountsIdsFilter() []string {
	if o == nil {
		return nil
	}
	return o.CloudAccountsIdsFilter
}

func (o *GetServerlessFunctionsRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetServerlessFunctionsRequest) GetFuncName() []string {
	if o == nil {
		return nil
	}
	return o.FuncName
}

func (o *GetServerlessFunctionsRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetServerlessFunctionsRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetServerlessFunctionsRequest) GetPolicyRisk() []GetServerlessFunctionsPolicyRisk {
	if o == nil {
		return nil
	}
	return o.PolicyRisk
}

func (o *GetServerlessFunctionsRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetServerlessFunctionsRequest) GetResult() []GetServerlessFunctionsResult {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetServerlessFunctionsRequest) GetRisk() []GetServerlessFunctionsRisk {
	if o == nil {
		return nil
	}
	return o.Risk
}

func (o *GetServerlessFunctionsRequest) GetSecretsRisk() []GetServerlessFunctionsSecretsRisk {
	if o == nil {
		return nil
	}
	return o.SecretsRisk
}

func (o *GetServerlessFunctionsRequest) GetSortDir() *GetServerlessFunctionsSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

type GetServerlessFunctionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Success
	ServerlessFunctions []shared.ServerlessFunction
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetServerlessFunctionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetServerlessFunctionsResponse) GetServerlessFunctions() []shared.ServerlessFunction {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctions
}

func (o *GetServerlessFunctionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetServerlessFunctionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

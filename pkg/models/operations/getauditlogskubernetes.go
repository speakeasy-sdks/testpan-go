// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
	"time"
)

type Result string

const (
	ResultAllow  Result = "ALLOW"
	ResultDetect Result = "DETECT"
	ResultBlock  Result = "BLOCK"
	ResultRisky  Result = "RISKY"
)

func (e Result) ToPointer() *Result {
	return &e
}

func (e *Result) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "DETECT":
		fallthrough
	case "BLOCK":
		fallthrough
	case "RISKY":
		*e = Result(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Result: %v", v)
	}
}

// GetAuditLogsKubernetesQueryParamSortDir - sorting direction
type GetAuditLogsKubernetesQueryParamSortDir string

const (
	GetAuditLogsKubernetesQueryParamSortDirAsc  GetAuditLogsKubernetesQueryParamSortDir = "ASC"
	GetAuditLogsKubernetesQueryParamSortDirDesc GetAuditLogsKubernetesQueryParamSortDir = "DESC"
)

func (e GetAuditLogsKubernetesQueryParamSortDir) ToPointer() *GetAuditLogsKubernetesQueryParamSortDir {
	return &e
}

func (e *GetAuditLogsKubernetesQueryParamSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetAuditLogsKubernetesQueryParamSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAuditLogsKubernetesQueryParamSortDir: %v", v)
	}
}

// GetAuditLogsKubernetesQueryParamSortKey - sort key
type GetAuditLogsKubernetesQueryParamSortKey string

const (
	GetAuditLogsKubernetesQueryParamSortKeyFirstSeen GetAuditLogsKubernetesQueryParamSortKey = "firstSeen"
	GetAuditLogsKubernetesQueryParamSortKeyLastSeen  GetAuditLogsKubernetesQueryParamSortKey = "lastSeen"
	GetAuditLogsKubernetesQueryParamSortKeyAction    GetAuditLogsKubernetesQueryParamSortKey = "action"
	GetAuditLogsKubernetesQueryParamSortKeyUser      GetAuditLogsKubernetesQueryParamSortKey = "user"
	GetAuditLogsKubernetesQueryParamSortKeyTotal     GetAuditLogsKubernetesQueryParamSortKey = "total"
)

func (e GetAuditLogsKubernetesQueryParamSortKey) ToPointer() *GetAuditLogsKubernetesQueryParamSortKey {
	return &e
}

func (e *GetAuditLogsKubernetesQueryParamSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "firstSeen":
		fallthrough
	case "lastSeen":
		fallthrough
	case "action":
		fallthrough
	case "user":
		fallthrough
	case "total":
		*e = GetAuditLogsKubernetesQueryParamSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAuditLogsKubernetesQueryParamSortKey: %v", v)
	}
}

type GetAuditLogsKubernetesRequest struct {
	// the cluster name to filter by
	ClusterName *string `queryParam:"style=form,explode=true,name=clusterName"`
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// End date of the query
	EndTime time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// Kubernetes audit action
	KubernetesAuditAction []string `queryParam:"style=form,explode=false,name=kubernetesAuditAction"`
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// the namespace name to filter by
	NamespaceName *string `queryParam:"style=form,explode=true,name=namespaceName"`
	// When true, the pagination params will be ignored
	NoPagination *bool `queryParam:"style=form,explode=true,name=noPagination"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// Resource kind
	ResourceKind *string `queryParam:"style=form,explode=true,name=resourceKind"`
	// Resource name
	ResourceName *string `queryParam:"style=form,explode=true,name=resourceName"`
	// event result filter
	Result []Result `queryParam:"style=form,explode=false,name=result"`
	// sorting direction
	SortDir *GetAuditLogsKubernetesQueryParamSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// sort key
	SortKey *GetAuditLogsKubernetesQueryParamSortKey `default:"lastSeen" queryParam:"style=form,explode=true,name=sortKey"`
	// Start date of the query
	StartTime time.Time `queryParam:"style=form,explode=true,name=startTime"`
	// User name
	User *string `queryParam:"style=form,explode=true,name=user"`
}

func (g GetAuditLogsKubernetesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAuditLogsKubernetesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAuditLogsKubernetesRequest) GetClusterName() *string {
	if o == nil {
		return nil
	}
	return o.ClusterName
}

func (o *GetAuditLogsKubernetesRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetAuditLogsKubernetesRequest) GetEndTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndTime
}

func (o *GetAuditLogsKubernetesRequest) GetKubernetesAuditAction() []string {
	if o == nil {
		return nil
	}
	return o.KubernetesAuditAction
}

func (o *GetAuditLogsKubernetesRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetAuditLogsKubernetesRequest) GetNamespaceName() *string {
	if o == nil {
		return nil
	}
	return o.NamespaceName
}

func (o *GetAuditLogsKubernetesRequest) GetNoPagination() *bool {
	if o == nil {
		return nil
	}
	return o.NoPagination
}

func (o *GetAuditLogsKubernetesRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetAuditLogsKubernetesRequest) GetResourceKind() *string {
	if o == nil {
		return nil
	}
	return o.ResourceKind
}

func (o *GetAuditLogsKubernetesRequest) GetResourceName() *string {
	if o == nil {
		return nil
	}
	return o.ResourceName
}

func (o *GetAuditLogsKubernetesRequest) GetResult() []Result {
	if o == nil {
		return nil
	}
	return o.Result
}

func (o *GetAuditLogsKubernetesRequest) GetSortDir() *GetAuditLogsKubernetesQueryParamSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetAuditLogsKubernetesRequest) GetSortKey() *GetAuditLogsKubernetesQueryParamSortKey {
	if o == nil {
		return nil
	}
	return o.SortKey
}

func (o *GetAuditLogsKubernetesRequest) GetStartTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartTime
}

func (o *GetAuditLogsKubernetesRequest) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

type GetAuditLogsKubernetesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	Classes []shared.KubernetesAuditLog
}

func (o *GetAuditLogsKubernetesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAuditLogsKubernetesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAuditLogsKubernetesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetAuditLogsKubernetesResponse) GetClasses() []shared.KubernetesAuditLog {
	if o == nil {
		return nil
	}
	return o.Classes
}

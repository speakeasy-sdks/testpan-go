// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"time"
)

type PodDefinitionInput struct {
	ClusterID      string           `json:"clusterId"`
	Containers     []Container      `json:"containers"`
	InitContainers []Container      `json:"initContainers,omitempty"`
	Kind           *PodTemplateKind `json:"kind,omitempty"`
	Labels         []Label          `json:"labels,omitempty"`
	// in pod template, this is the normalized name (for example, get it from pod -> replicaset -> deployment).
	//
	Name string `json:"name"`
	// The source type of the pod definition
	PodDefinitionSource *PodDefinitionSource `json:"podDefinitionSource,omitempty"`
}

func (o *PodDefinitionInput) GetClusterID() string {
	if o == nil {
		return ""
	}
	return o.ClusterID
}

func (o *PodDefinitionInput) GetContainers() []Container {
	if o == nil {
		return []Container{}
	}
	return o.Containers
}

func (o *PodDefinitionInput) GetInitContainers() []Container {
	if o == nil {
		return nil
	}
	return o.InitContainers
}

func (o *PodDefinitionInput) GetKind() *PodTemplateKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *PodDefinitionInput) GetLabels() []Label {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *PodDefinitionInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PodDefinitionInput) GetPodDefinitionSource() *PodDefinitionSource {
	if o == nil {
		return nil
	}
	return o.PodDefinitionSource
}

type PodDefinition struct {
	ClusterID  string      `json:"clusterId"`
	Containers []Container `json:"containers"`
	CreatedAt  *time.Time  `json:"createdAt,omitempty"`
	// unique Id
	ID             *string          `json:"id,omitempty"`
	InitContainers []Container      `json:"initContainers,omitempty"`
	Kind           *PodTemplateKind `json:"kind,omitempty"`
	Labels         []Label          `json:"labels,omitempty"`
	// in pod template, this is the normalized name (for example, get it from pod -> replicaset -> deployment).
	//
	Name string `json:"name"`
	// The source type of the pod definition
	PodDefinitionSource *PodDefinitionSource `json:"podDefinitionSource,omitempty"`
}

func (p PodDefinition) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PodDefinition) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PodDefinition) GetClusterID() string {
	if o == nil {
		return ""
	}
	return o.ClusterID
}

func (o *PodDefinition) GetContainers() []Container {
	if o == nil {
		return []Container{}
	}
	return o.Containers
}

func (o *PodDefinition) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PodDefinition) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PodDefinition) GetInitContainers() []Container {
	if o == nil {
		return nil
	}
	return o.InitContainers
}

func (o *PodDefinition) GetKind() *PodTemplateKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *PodDefinition) GetLabels() []Label {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *PodDefinition) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PodDefinition) GetPodDefinitionSource() *PodDefinitionSource {
	if o == nil {
		return nil
	}
	return o.PodDefinitionSource
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AuthorizationSchemeAuthorizationSchemeType string

const (
	AuthorizationSchemeAuthorizationSchemeTypeAuthorizationSchemeBasicAuth   AuthorizationSchemeAuthorizationSchemeType = "AuthorizationSchemeBasicAuth"
	AuthorizationSchemeAuthorizationSchemeTypeAuthorizationSchemeAPIToken    AuthorizationSchemeAuthorizationSchemeType = "AuthorizationSchemeApiToken"
	AuthorizationSchemeAuthorizationSchemeTypeAuthorizationSchemeBearerToken AuthorizationSchemeAuthorizationSchemeType = "AuthorizationSchemeBearerToken"
	AuthorizationSchemeAuthorizationSchemeTypeAuthorizationSchemeNone        AuthorizationSchemeAuthorizationSchemeType = "AuthorizationSchemeNone"
)

func (e AuthorizationSchemeAuthorizationSchemeType) ToPointer() *AuthorizationSchemeAuthorizationSchemeType {
	return &e
}

func (e *AuthorizationSchemeAuthorizationSchemeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AuthorizationSchemeBasicAuth":
		fallthrough
	case "AuthorizationSchemeApiToken":
		fallthrough
	case "AuthorizationSchemeBearerToken":
		fallthrough
	case "AuthorizationSchemeNone":
		*e = AuthorizationSchemeAuthorizationSchemeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizationSchemeAuthorizationSchemeType: %v", v)
	}
}

type AuthorizationScheme struct {
	AuthorizationSchemeType AuthorizationSchemeAuthorizationSchemeType `json:"authorizationSchemeType"`
}

func (o *AuthorizationScheme) GetAuthorizationSchemeType() AuthorizationSchemeAuthorizationSchemeType {
	if o == nil {
		return AuthorizationSchemeAuthorizationSchemeType("")
	}
	return o.AuthorizationSchemeType
}

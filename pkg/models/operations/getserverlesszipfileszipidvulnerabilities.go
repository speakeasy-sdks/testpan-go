// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

// GetServerlessZipFilesZipIDVulnerabilitiesSortDir - sorting direction
type GetServerlessZipFilesZipIDVulnerabilitiesSortDir string

const (
	GetServerlessZipFilesZipIDVulnerabilitiesSortDirAsc  GetServerlessZipFilesZipIDVulnerabilitiesSortDir = "ASC"
	GetServerlessZipFilesZipIDVulnerabilitiesSortDirDesc GetServerlessZipFilesZipIDVulnerabilitiesSortDir = "DESC"
)

func (e GetServerlessZipFilesZipIDVulnerabilitiesSortDir) ToPointer() *GetServerlessZipFilesZipIDVulnerabilitiesSortDir {
	return &e
}

func (e *GetServerlessZipFilesZipIDVulnerabilitiesSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetServerlessZipFilesZipIDVulnerabilitiesSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerlessZipFilesZipIDVulnerabilitiesSortDir: %v", v)
	}
}

type GetServerlessZipFilesZipIDVulnerabilitiesRequest struct {
	// The number of entries to return (pagination)
	MaxResults *float64 `default:"100" queryParam:"style=form,explode=true,name=maxResults"`
	// Return entries from this offset (pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// sorting direction
	SortDir *GetServerlessZipFilesZipIDVulnerabilitiesSortDir `default:"DESC" queryParam:"style=form,explode=true,name=sortDir"`
	ZipID   string                                            `pathParam:"style=simple,explode=false,name=zipId"`
}

func (g GetServerlessZipFilesZipIDVulnerabilitiesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetServerlessZipFilesZipIDVulnerabilitiesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetServerlessZipFilesZipIDVulnerabilitiesRequest) GetMaxResults() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetServerlessZipFilesZipIDVulnerabilitiesRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetServerlessZipFilesZipIDVulnerabilitiesRequest) GetSortDir() *GetServerlessZipFilesZipIDVulnerabilitiesSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetServerlessZipFilesZipIDVulnerabilitiesRequest) GetZipID() string {
	if o == nil {
		return ""
	}
	return o.ZipID
}

type GetServerlessZipFilesZipIDVulnerabilitiesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Vulnerabilities []shared.Vulnerability
}

func (o *GetServerlessZipFilesZipIDVulnerabilitiesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetServerlessZipFilesZipIDVulnerabilitiesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetServerlessZipFilesZipIDVulnerabilitiesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetServerlessZipFilesZipIDVulnerabilitiesResponse) GetVulnerabilities() []shared.Vulnerability {
	if o == nil {
		return nil
	}
	return o.Vulnerabilities
}

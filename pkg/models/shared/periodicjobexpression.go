// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PeriodicJobExpressionPeriodicJobType string

const (
	PeriodicJobExpressionPeriodicJobTypeNonPeriodicJobExpression     PeriodicJobExpressionPeriodicJobType = "NonPeriodicJobExpression"
	PeriodicJobExpressionPeriodicJobTypeSinglePeriodicJobExpression  PeriodicJobExpressionPeriodicJobType = "SinglePeriodicJobExpression"
	PeriodicJobExpressionPeriodicJobTypeByHoursPeriodicJobExpression PeriodicJobExpressionPeriodicJobType = "ByHoursPeriodicJobExpression"
	PeriodicJobExpressionPeriodicJobTypeByDaysPeriodicJobExpression  PeriodicJobExpressionPeriodicJobType = "ByDaysPeriodicJobExpression"
	PeriodicJobExpressionPeriodicJobTypeWeeklyPeriodicJobExpression  PeriodicJobExpressionPeriodicJobType = "WeeklyPeriodicJobExpression"
)

func (e PeriodicJobExpressionPeriodicJobType) ToPointer() *PeriodicJobExpressionPeriodicJobType {
	return &e
}

func (e *PeriodicJobExpressionPeriodicJobType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NonPeriodicJobExpression":
		fallthrough
	case "SinglePeriodicJobExpression":
		fallthrough
	case "ByHoursPeriodicJobExpression":
		fallthrough
	case "ByDaysPeriodicJobExpression":
		fallthrough
	case "WeeklyPeriodicJobExpression":
		*e = PeriodicJobExpressionPeriodicJobType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PeriodicJobExpressionPeriodicJobType: %v", v)
	}
}

type PeriodicJobExpression struct {
	PeriodicJobType PeriodicJobExpressionPeriodicJobType `json:"PeriodicJobType"`
}

func (o *PeriodicJobExpression) GetPeriodicJobType() PeriodicJobExpressionPeriodicJobType {
	if o == nil {
		return PeriodicJobExpressionPeriodicJobType("")
	}
	return o.PeriodicJobType
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/testpan-go/pkg/models/shared"
	"github.com/speakeasy-sdks/testpan-go/pkg/utils"
	"net/http"
)

// GetEnvironmentsSortDir - sorting direction
type GetEnvironmentsSortDir string

const (
	GetEnvironmentsSortDirAsc  GetEnvironmentsSortDir = "ASC"
	GetEnvironmentsSortDirDesc GetEnvironmentsSortDir = "DESC"
)

func (e GetEnvironmentsSortDir) ToPointer() *GetEnvironmentsSortDir {
	return &e
}

func (e *GetEnvironmentsSortDir) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GetEnvironmentsSortDir(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEnvironmentsSortDir: %v", v)
	}
}

// GetEnvironmentsSortKey - Environment sort key
type GetEnvironmentsSortKey string

const (
	GetEnvironmentsSortKeyName GetEnvironmentsSortKey = "name"
)

func (e GetEnvironmentsSortKey) ToPointer() *GetEnvironmentsSortKey {
	return &e
}

func (e *GetEnvironmentsSortKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = GetEnvironmentsSortKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEnvironmentsSortKey: %v", v)
	}
}

type GetEnvironmentsRequest struct {
	// When true, the API will return an xlsx file, and pagination will be ignored
	DownloadAsXlsx *bool `queryParam:"style=form,explode=true,name=downloadAsXlsx"`
	// include systems environments
	IncludeSystemEnvs *bool `default:"true" queryParam:"style=form,explode=true,name=includeSystemEnvs"`
	// Filter environments by name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// sorting direction
	SortDir *GetEnvironmentsSortDir `default:"ASC" queryParam:"style=form,explode=true,name=sortDir"`
	// Environment sort key
	SortKey *GetEnvironmentsSortKey `queryParam:"style=form,explode=true,name=sortKey"`
}

func (g GetEnvironmentsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEnvironmentsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetEnvironmentsRequest) GetDownloadAsXlsx() *bool {
	if o == nil {
		return nil
	}
	return o.DownloadAsXlsx
}

func (o *GetEnvironmentsRequest) GetIncludeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeSystemEnvs
}

func (o *GetEnvironmentsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetEnvironmentsRequest) GetSortDir() *GetEnvironmentsSortDir {
	if o == nil {
		return nil
	}
	return o.SortDir
}

func (o *GetEnvironmentsRequest) GetSortKey() *GetEnvironmentsSortKey {
	if o == nil {
		return nil
	}
	return o.SortKey
}

type GetEnvironmentsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Success
	Environments []shared.Environment
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetEnvironmentsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetEnvironmentsResponse) GetEnvironments() []shared.Environment {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *GetEnvironmentsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetEnvironmentsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
